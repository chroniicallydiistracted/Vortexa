./docker-compose.dev.yml:9:      - ALLOW_HOSTS=gibs.earthdata.nasa.gov,opengeo.ncep.noaa.gov,nomads.ncep.noaa.gov
./.github/instructions/copilot-instructions.md:9:- **Proxy:** TypeScript Express tile/edge proxy (dev on port 4000); normalizes NASA GIBS WMTS and similar; optional S3 tile cache; strict allow‑list; adds cache/CORS headers; provides timestamp resolution endpoints for sub‑daily layers.
./.github/instructions/copilot-instructions.md:51:Add generic `GET /api/gibs/timestamps?layer=...`; refactor GOES B‑13 to common resolver; add support for GeoColor, Band 2/13, FireTemp, Air Mass; tests with mocked WMTS GetCapabilities.
./.github/instructions/copilot-instructions.md:63:- GOES strategy: default to one lightweight basemap; expose GOES‑East/West toggles. If auto‑switching by viewport, provide a user override.
./.github/instructions/copilot-instructions.md:96:- Tile proxy live; **GeoColor and/or GOES‑East/West Band‑13** render via WMTS through the proxy.
./.gitignore:28:GIBS FAVORITE LAYER MASTERLIST.txt
./VISION.md:21:  - **NOAA/NWS** (api.weather.gov: alerts, radar mosaics), **NASA GIBS** (GOES, VIIRS, MODIS), **GFS/HRRR/ICON/ECMWF** model fields, **MRMS**, **USGS**, **FIRMS**, **AirNow** (keyed), with room for additional vetted feeds.
./VISION.md:60:- **Tile proxy** normalizing GIBS WMTS; demo layers: **GOES-East/West ABI GeoColor**.
./VISION.md:83:**Proxy**: Node/Express TS; WMTS normalization (GIBS et al.); optional S3 tile cache; CORS; allow-list.
./VISION.md:92:- **NASA GIBS**: GOES-East/West **GeoColor/IR/true color** WMTS (public; base path quirks normalized).
./VISION.md:104:### GOES East vs West & Near-Global Coverage
./VISION.md:106:- **GOES-East (75°W)**: Americas/Atlantic; **GOES-West (137°W)**: Pacific/West Coast.
./VISION.md:108:  - **Auto-switch** GOES layer by viewport center (East/West) with a seamless boundary and user override.
./VISION.md:110:  - For broader coverage, add polar imagery (e.g., **VIIRS “Black Marble” night** or **Blue Marble** static) when out of GOES FOV.
./VISION.md:156:- [ ] Tile proxy live; **GOES-East/West GeoColor** renders via WMTS through proxy.
./VISION.md:166:- **Upstream instability** (GIBS, NWS outages): retries, cache headers, graceful fallbacks, clear UI states.
./dev.log:29:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_GeoColor/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:30:[proxy] GET /api/gibs/tile/GOES-East_ABI_GeoColor/1/1/1.jpg 200 1121 - 567.670 ms
./dev.log:31:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_GeoColor/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:32:[proxy] GET /api/gibs/tile/GOES-West_ABI_GeoColor/1/1/1.jpg 200 18328 - 312.171 ms
./dev.log:33:[proxy] No timestamps available for layer: GOES-East_ABI_Band13_Clean_IR
./dev.log:34:[proxy] GET /api/gibs/tile/GOES-East_ABI_Band13_Clean_IR/1/1/1.jpg 404 75 - 682.599 ms
./dev.log:35:[proxy] No timestamps available for layer: GOES-West_ABI_Band13_Clean_IR
./dev.log:36:[proxy] GET /api/gibs/tile/GOES-West_ABI_Band13_Clean_IR/1/1/1.jpg 404 75 - 688.354 ms
./dev.log:37:[proxy] No timestamps available for layer: GOES-East_ABI_Band2_Red_Visible
./dev.log:38:[proxy] GET /api/gibs/tile/GOES-East_ABI_Band2_Red_Visible/1/1/1.jpg 404 77 - 683.048 ms
./dev.log:39:[proxy] No timestamps available for layer: GOES-West_ABI_Band2_Red_Visible
./dev.log:40:[proxy] GET /api/gibs/tile/GOES-West_ABI_Band2_Red_Visible/1/1/1.jpg 404 77 - 685.763 ms
./dev.log:41:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_Air_Mass/default/2025-08-15T18:00:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:42:[proxy] Upstream error for https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_Air_Mass/default/2025-08-15T18:00:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg: 400 Bad Request
./dev.log:43:[proxy] GET /api/gibs/tile/GOES-East_ABI_Air_Mass/1/1/1.jpg 400 215 - 96.790 ms
./dev.log:44:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_Air_Mass/default/2025-08-15T18:00:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:45:[proxy] Upstream error for https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_Air_Mass/default/2025-08-15T18:00:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg: 400 Bad Request
./dev.log:46:[proxy] GET /api/gibs/tile/GOES-West_ABI_Air_Mass/1/1/1.jpg 400 215 - 84.280 ms
./dev.log:47:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_Dust/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:48:[proxy] GET /api/gibs/tile/GOES-East_ABI_Dust/1/1/1.jpg 200 1203 - 352.641 ms
./dev.log:49:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_Dust/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:50:[proxy] Upstream error for https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_Dust/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg: 404 Not Found
./dev.log:51:[proxy] GET /api/gibs/tile/GOES-West_ABI_Dust/1/1/1.jpg 404 209 - 116.160 ms
./dev.log:52:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_FireTemp/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:53:[proxy] GET /api/gibs/tile/GOES-East_ABI_FireTemp/1/1/1.jpg 200 783 - 311.496 ms
./dev.log:54:[proxy] Requesting tile: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_FireTemp/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg
./dev.log:55:[proxy] Upstream error for https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-West_ABI_FireTemp/default/2025-08-26T17:36:00Z/GoogleMapsCompatible_Level7/1/1/1.jpg: 404 Not Found
./dev.log:56:[proxy] GET /api/gibs/tile/GOES-West_ABI_FireTemp/1/1/1.jpg 404 213 - 120.133 ms
./services/proxy/src/config/cache.config.example.json:6:      "host": "gibs.earthdata.nasa.gov",
./services/proxy/src/tiles.test.ts:7:  'https://gibs.earthdata.nasa.gov',
./services/proxy/src/tiles.test.ts:8:  'https://gibs.earthdata.nasa.gov/',
./services/proxy/src/tiles.test.ts:9:  'https://gibs.earthdata.nasa.gov/wmts',
./services/proxy/src/tiles.test.ts:10:  'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best',
./services/proxy/src/tiles.test.ts:11:  'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi',
./services/proxy/src/tiles.test.ts:15:  const app = createApp({ allowHosts: ['gibs.earthdata.nasa.gov'] });
./services/proxy/src/tiles.test.ts:31:        /\/wmts\/epsg3857\/best\/LAYER\/default\/current\/GoogleMapsCompatible/,
./services/proxy/src/routes/routes-gibs.ts:16:    const layer = (req.query.layer as string) || 'GOES-East_ABI_GeoColor';
./services/proxy/src/routes/routes-gibs.ts:27:        process.env.GIBS_CAPS_URL ||
./services/proxy/src/routes/routes-gibs.ts:28:        'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities',
./services/proxy/src/routes/routes-gibs.ts:36:        process.env.GIBS_CAPS_URL ||
./services/proxy/src/routes/routes-gibs.ts:37:        'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities',
./services/proxy/src/routes/routes-gibs.ts:143:  res.redirect(302, `/api/gibs/tile/GOES-East_ABI_GeoColor/${z}/${y}/${x}.${ext}`);
./services/proxy/src/index.ts:69:      'gibs.earthdata.nasa.gov,opengeo.ncep.noaa.gov,nomads.ncep.noaa.gov,basemaps.cartocdn.com'
./services/proxy/src/index.ts:226:    // GIBS GOES Band 13 timestamp
./services/proxy/src/index.ts:309:  const gibsBurst = Number(process.env.GIBS_RATE_BURST || 20);
./services/proxy/src/index.ts:310:  const gibsRefill = Number(process.env.GIBS_RATE_REFILL_PER_SEC || 10);
./services/proxy/src/index.ts:340:  // --- Dynamic timestamped layers (Rainviewer radar & GIBS GOES Band 13) ---
./services/proxy/src/index.ts:426:        'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/1.0.0/WMTSCapabilities.xml',
./services/proxy/src/index.ts:431:      const layerIdx = xml.indexOf('GOES-East_Full_Disk_Band_13_ENHANCED');
./services/proxy/src/index.ts:451:      const { z, y, x } = req.params; // GIBS order /{z}/{y}/{x}
./services/proxy/src/index.ts:452:      const tileUrl = `https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_Full_Disk_Band_13_ENHANCED/default/${encodeURIComponent(ts)}/GoogleMapsCompatible_Level8/${z}/${y}/${x}.png`;
./services/proxy/src/index.ts:505:  // GIBS specific metrics (status + duration)
./services/proxy/src/index.ts:508:    help: 'Upstream status for GIBS tile fetch',
./services/proxy/src/index.ts:514:    help: 'Duration of GIBS tile upstream fetch (ms)',
./services/proxy/src/index.ts:777:    const tileUrl = `${root}/epsg3857/best/${encodeURIComponent(layer)}/default/current/GoogleMapsCompatible/${z}/${y}/${x}.${ext}${timePart}`;
./services/proxy/src/__tests__/gibsOps.test.ts:7:    process.env.GIBS_RATE_BURST = '2';
./services/proxy/src/__tests__/gibsOps.test.ts:8:    process.env.GIBS_RATE_REFILL_PER_SEC = '0';
./services/proxy/src/__tests__/gibsOps.test.ts:18:          `<?xml version=\"1.0\"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name=\"time\">2025-08-24T18:00:00Z 2025-08-24T19:00:00Z</Dimension></Layer></Contents></Capabilities>`,
./services/proxy/src/__tests__/gibsOps.test.ts:28:    const allowed1 = await request(app).get('/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png');
./services/proxy/src/__tests__/gibsOps.test.ts:29:    const allowed2 = await request(app).get('/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png');
./services/proxy/src/__tests__/gibsOps.test.ts:32:    const limited = await request(app).get('/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png');
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:16:      <Title>GOES-East_ABI_GeoColor</Title>
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:39:    expect(pickTms('GOES-East_ABI_GeoColor')).toBe('GoogleMapsCompatible_Level8');
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:41:      'GoogleMapsCompatible_Level9',
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:45:  it('getTimestamps + getLatestTimestamp for GOES', async () => {
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:46:    const ts = await getTimestamps('GOES-East_ABI_GeoColor');
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:48:    expect(await getLatestTimestamp('GOES-East_ABI_GeoColor')).toBe('2025-08-24T19:00:00Z');
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:62:      layerId: 'GOES-East_ABI_GeoColor',
./services/proxy/src/__tests__/gibsCapabilities.spec.ts:69:      /GOES-East_ABI_GeoColor\/default\/2025-08-24T19%3A00%3A00Z\/GoogleMapsCompatible_Level8\/2\/1\/0\.png$/,
./services/proxy/src/__tests__/gibsTimestamps.test.ts:10:      <ows:Title>GOES-East_ABI_GeoColor</ows:Title>
./services/proxy/src/__tests__/gibsTimestamps.test.ts:33:    const r = await request(app).get('/api/gibs/timestamps?layer=GOES-East_ABI_GeoColor');
./services/proxy/src/__tests__/gibsTimestamps.test.ts:36:    expect(r.body.layer).toBe('GOES-East_ABI_GeoColor');
./services/proxy/src/__tests__/gibsTimestamps.test.ts:54:    const r = await request(app).get('/api/gibs/timestamps?layer=GOES-East_ABI_GeoColor');
./services/proxy/src/__tests__/__tests__-gibs.test.ts:24:    const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2022-12-31T23:00:00Z ${time}</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/src/__tests__/__tests__-gibs.test.ts:51:        'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_GeoColor/default/',
./services/proxy/src/__tests__/__tests__-gibs.test.ts:59:    const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/src/__tests__/__tests__-gibs.test.ts:91:    const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/src/__tests__/__tests__-gibs.test.ts:115:    const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z 2023-01-01T00:10:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/src/__tests__/__tests__-gibs.test.ts:132:      `/api/gibs/tile/GOES-East_ABI_GeoColor/3/2/1.png?time=${encodeURIComponent(time)}`,
./services/proxy/src/__tests__/__tests__-gibs.test.ts:141:    const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/src/__tests__/__tests__-gibs.test.ts:151:      `/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png?time=${encodeURIComponent(badTime)}`,
./services/proxy/src/__tests__/gibsUtils.test.ts:8:    const app = createApp({ allowHosts: ['gibs.earthdata.nasa.gov'] });
./services/proxy/src/__tests__/gibsUtils.test.ts:11:    expect(res.headers.location).toMatch(/\/api\/gibs\/tile\/GOES-East_ABI_GeoColor\/1\/3\/2\.png/);
./services/proxy/src/lib/gibs/capabilities.ts:5:  process.env.GIBS_CAPS_URL ||
./services/proxy/src/lib/gibs/capabilities.ts:6:  'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities';
./services/proxy/src/lib/gibs/capabilities.ts:8:  process.env.GIBS_TILE_BASE || 'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best';
./services/proxy/src/lib/gibs/capabilities.ts:202:  if (/GOES|ABI/i.test(layerId)) return 'GoogleMapsCompatible_Level7';
./services/proxy/src/lib/gibs/capabilities.ts:203:  if (/Graticule/i.test(layerId)) return 'GoogleMapsCompatible_Level13';
./services/proxy/src/lib/gibs/capabilities.ts:205:  return 'GoogleMapsCompatible_Level8';
./services/proxy/health-check.ts:25:const GIBS_CAP_TIMEOUT_MS = Number(process.env.GIBS_CAP_TIMEOUT_MS || 15000);
./services/proxy/health-check.ts:301:    'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities';
./services/proxy/health-check.ts:304:    const r = await fetchWithTimeout(capUrl, { timeout: GIBS_CAP_TIMEOUT_MS });
./services/proxy/health-check.ts:396:  // GIBS layers
./services/proxy/health-check.ts:406:  // Coordinate substitution (radar & GOES may need z/x/y=0)
./services/proxy/health-check.ts:412:  // Resolve dynamic time first (GIBS, Rainviewer, etc.)
./services/proxy/dist/src/tiles.test.js:6:    'https://gibs.earthdata.nasa.gov',
./services/proxy/dist/src/tiles.test.js:7:    'https://gibs.earthdata.nasa.gov/',
./services/proxy/dist/src/tiles.test.js:8:    'https://gibs.earthdata.nasa.gov/wmts',
./services/proxy/dist/src/tiles.test.js:9:    'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best',
./services/proxy/dist/src/tiles.test.js:10:    'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi',
./services/proxy/dist/src/tiles.test.js:13:    const app = createApp({ allowHosts: ['gibs.earthdata.nasa.gov'] });
./services/proxy/dist/src/tiles.test.js:28:            expect(decoded).toMatch(/\/wmts\/epsg3857\/best\/LAYER\/default\/current\/GoogleMapsCompatible/);
./services/proxy/dist/src/index.js:58:            'gibs.earthdata.nasa.gov,opengeo.ncep.noaa.gov,nomads.ncep.noaa.gov,basemaps.cartocdn.com')
./services/proxy/dist/src/index.js:184:        // GIBS GOES Band 13 timestamp
./services/proxy/dist/src/index.js:260:    const gibsBurst = Number(process.env.GIBS_RATE_BURST || 20);
./services/proxy/dist/src/index.js:261:    const gibsRefill = Number(process.env.GIBS_RATE_REFILL_PER_SEC || 10);
./services/proxy/dist/src/index.js:362:            const cap = await fetch('https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/1.0.0/WMTSCapabilities.xml', { signal: ac.signal });
./services/proxy/dist/src/index.js:366:            const layerIdx = xml.indexOf('GOES-East_Full_Disk_Band_13_ENHANCED');
./services/proxy/dist/src/index.js:388:            const { z, y, x } = req.params; // GIBS order /{z}/{y}/{x}
./services/proxy/dist/src/index.js:389:            const tileUrl = `https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_Full_Disk_Band_13_ENHANCED/default/${encodeURIComponent(ts)}/GoogleMapsCompatible_Level8/${z}/${y}/${x}.png`;
./services/proxy/dist/src/index.js:444:    // GIBS specific metrics (status + duration)
./services/proxy/dist/src/index.js:447:        help: 'Upstream status for GIBS tile fetch',
./services/proxy/dist/src/index.js:453:        help: 'Duration of GIBS tile upstream fetch (ms)',
./services/proxy/dist/src/index.js:668:        const tileUrl = `${root}/epsg3857/best/${encodeURIComponent(layer)}/default/current/GoogleMapsCompatible/${z}/${y}/${x}.${ext}${timePart}`;
./services/proxy/dist/src/routes/routes-gibs.js:9:        const layer = req.query.layer || 'GOES-East_ABI_GeoColor';
./services/proxy/dist/src/routes/routes-gibs.js:18:            capabilitiesUrl: process.env.GIBS_CAPS_URL ||
./services/proxy/dist/src/routes/routes-gibs.js:19:                'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities',
./services/proxy/dist/src/routes/routes-gibs.js:27:            capabilitiesUrl: process.env.GIBS_CAPS_URL ||
./services/proxy/dist/src/routes/routes-gibs.js:28:                'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities',
./services/proxy/dist/src/routes/routes-gibs.js:120:    res.redirect(302, `/api/gibs/tile/GOES-East_ABI_GeoColor/${z}/${y}/${x}.${ext}`);
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:21:        const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2022-12-31T23:00:00Z ${time}</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:44:        expect(calledUrl.startsWith('https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GOES-East_ABI_GeoColor/default/')).toBe(true);
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:49:        const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:79:        const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:102:        const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z 2023-01-01T00:10:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:118:        const r = await request(app).get(`/api/gibs/tile/GOES-East_ABI_GeoColor/3/2/1.png?time=${encodeURIComponent(time)}`);
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:125:        const capsXml = `<?xml version="1.0"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name="time">2023-01-01T00:00:00Z</Dimension></Layer></Contents></Capabilities>`;
./services/proxy/dist/src/__tests__/__tests__-gibs.test.js:134:        const r = await request(app).get(`/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png?time=${encodeURIComponent(badTime)}`);
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:9:      <Title>GOES-East_ABI_GeoColor</Title>
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:29:        expect(pickTms('GOES-East_ABI_GeoColor')).toBe('GoogleMapsCompatible_Level8');
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:30:        expect(pickTms('MODIS_Terra_CorrectedReflectance_TrueColor')).toBe('GoogleMapsCompatible_Level9');
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:32:    it('getTimestamps + getLatestTimestamp for GOES', async () => {
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:33:        const ts = await getTimestamps('GOES-East_ABI_GeoColor');
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:35:        expect(await getLatestTimestamp('GOES-East_ABI_GeoColor')).toBe('2025-08-24T19:00:00Z');
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:45:            layerId: 'GOES-East_ABI_GeoColor',
./services/proxy/dist/src/__tests__/gibsCapabilities.spec.js:51:        expect(url).toMatch(/GOES-East_ABI_GeoColor\/default\/2025-08-24T19%3A00%3A00Z\/GoogleMapsCompatible_Level8\/2\/1\/0\.png$/);
./services/proxy/dist/src/__tests__/gibsTimestamps.test.js:9:      <ows:Title>GOES-East_ABI_GeoColor</ows:Title>
./services/proxy/dist/src/__tests__/gibsTimestamps.test.js:31:        const r = await request(app).get('/api/gibs/timestamps?layer=GOES-East_ABI_GeoColor');
./services/proxy/dist/src/__tests__/gibsTimestamps.test.js:34:        expect(r.body.layer).toBe('GOES-East_ABI_GeoColor');
./services/proxy/dist/src/__tests__/gibsTimestamps.test.js:52:        const r = await request(app).get('/api/gibs/timestamps?layer=GOES-East_ABI_GeoColor');
./services/proxy/dist/src/__tests__/gibsOps.test.js:6:        process.env.GIBS_RATE_BURST = '2';
./services/proxy/dist/src/__tests__/gibsOps.test.js:7:        process.env.GIBS_RATE_REFILL_PER_SEC = '0';
./services/proxy/dist/src/__tests__/gibsOps.test.js:16:            text: async () => `<?xml version=\"1.0\"?><Capabilities><Contents><Layer><Title>GOES-East_ABI_GeoColor</Title><Dimension name=\"time\">2025-08-24T18:00:00Z 2025-08-24T19:00:00Z</Dimension></Layer></Contents></Capabilities>`,
./services/proxy/dist/src/__tests__/gibsOps.test.js:26:        const allowed1 = await request(app).get('/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png');
./services/proxy/dist/src/__tests__/gibsOps.test.js:27:        const allowed2 = await request(app).get('/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png');
./services/proxy/dist/src/__tests__/gibsOps.test.js:30:        const limited = await request(app).get('/api/gibs/tile/GOES-East_ABI_GeoColor/1/0/0.png');
./services/proxy/dist/src/__tests__/gibsUtils.test.js:7:        const app = createApp({ allowHosts: ['gibs.earthdata.nasa.gov'] });
./services/proxy/dist/src/__tests__/gibsUtils.test.js:10:        expect(res.headers.location).toMatch(/\/api\/gibs\/tile\/GOES-East_ABI_GeoColor\/1\/3\/2\.png/);
./services/proxy/dist/src/lib/gibs/capabilities.js:3:const DEFAULT_CAPS_URL = process.env.GIBS_CAPS_URL ||
./services/proxy/dist/src/lib/gibs/capabilities.js:4:    'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities';
./services/proxy/dist/src/lib/gibs/capabilities.js:5:const DEFAULT_TILE_BASE = process.env.GIBS_TILE_BASE || 'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best';
./services/proxy/dist/src/lib/gibs/capabilities.js:166:    if (/GOES|ABI/i.test(layerId))
./services/proxy/dist/src/lib/gibs/capabilities.js:167:        return 'GoogleMapsCompatible_Level7';
./services/proxy/dist/src/lib/gibs/capabilities.js:169:        return 'GoogleMapsCompatible_Level13';
./services/proxy/dist/src/lib/gibs/capabilities.js:171:    return 'GoogleMapsCompatible_Level8';
./services/proxy/dist/health-check.js:24:const GIBS_CAP_TIMEOUT_MS = Number(process.env.GIBS_CAP_TIMEOUT_MS || 15000);
./services/proxy/dist/health-check.js:271:    const capUrl = 'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities';
./services/proxy/dist/health-check.js:275:        const r = await fetchWithTimeout(capUrl, { timeout: GIBS_CAP_TIMEOUT_MS });
./services/proxy/dist/health-check.js:369:    // GIBS layers
./services/proxy/dist/health-check.js:379:    // Coordinate substitution (radar & GOES may need z/x/y=0)
./services/proxy/dist/health-check.js:385:    // Resolve dynamic time first (GIBS, Rainviewer, etc.)
./AGENTOPERATINGMANUAL.md:16:• services/proxy/: TypeScript Express tile/edge proxy; normalizes NASA GIBS WMTS and similar. Dev server on port 4000.
./AGENTOPERATINGMANUAL.md:41:• Run `npm -w web run dev`; confirm that “Add Demo: NASA GIBS GeoColor” renders tiles via the proxy.
./AGENTOPERATINGMANUAL.md:45:• Test a WMTS request through the normalized route (use a known GIBS GOES layer id such as GOES-East_ABI_GeoColor).
./AGENTOPERATINGMANUAL.md:92:• GOES coverage strategy: default to one lightweight basemap; offer GOES-East/West layers as toggles. If implementing automatic GOES East/West switching by viewport, include a clear override in the UI.
./AGENTOPERATINGMANUAL.md:112:Add a new WMTS layer (e.g., another GOES product):
./web/.env.local:4:VITE_GIBS_WMTS_TILE_URL=/api/gibs/geocolor/{TileMatrix}/{TileCol}/{TileRow}.jpg
./web/public/catalog.json:18:      "attribution": "NASA GIBS",
./web/public/catalog.json:19:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/public/catalog.json:27:      "attribution": "NASA GIBS",
./web/public/catalog.json:28:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/public/catalog.json:36:      "attribution": "NASA GIBS",
./web/public/catalog.json:37:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/public/catalog.json:45:      "attribution": "NASA GIBS",
./web/public/catalog.json:46:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_NOAA20_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/public/catalog.json:54:      "attribution": "NASA GIBS",
./web/public/catalog.json:55:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_DayNightBand_At_Sensor_Radiance/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:60:      "suggested_label": "GOES-East ABI GeoColor (daytime true-color blend, nighttime IR blend)",
./web/public/catalog.json:61:      "slug": "GOES-East_ABI_GeoColor",
./web/public/catalog.json:63:      "attribution": "NASA GIBS",
./web/public/catalog.json:64:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg"
./web/public/catalog.json:68:      "suggested_label": "GOES-West ABI GeoColor (daytime true-color blend, nighttime IR blend)",
./web/public/catalog.json:69:      "slug": "GOES-West_ABI_GeoColor",
./web/public/catalog.json:71:      "attribution": "NASA GIBS",
./web/public/catalog.json:72:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_GeoColor/{z}/{y}/{x}.jpg"
./web/public/catalog.json:76:      "suggested_label": "GOES-East ABI Band 13 “clean” longwave IR (cloud-top temperature/structure)",
./web/public/catalog.json:77:      "slug": "GOES-East_ABI_Band13_Clean_IR",
./web/public/catalog.json:79:      "attribution": "NASA GIBS",
./web/public/catalog.json:80:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Band13_Clean_Infrared/{z}/{y}/{x}.jpg"
./web/public/catalog.json:84:      "suggested_label": "GOES-West ABI Band 13 “clean” longwave IR (cloud-top temperature/structure)",
./web/public/catalog.json:85:      "slug": "GOES-West_ABI_Band13_Clean_IR",
./web/public/catalog.json:87:      "attribution": "NASA GIBS",
./web/public/catalog.json:88:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Band13_Clean_Infrared/{z}/{y}/{x}.jpg"
./web/public/catalog.json:92:      "suggested_label": "GOES-East ABI Band 2 red visible reflectance (0.64 μm)",
./web/public/catalog.json:93:      "slug": "GOES-East_ABI_Band2_Red_Visible",
./web/public/catalog.json:95:      "attribution": "NASA GIBS",
./web/public/catalog.json:96:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Band2_Red_Visible/{z}/{y}/{x}.jpg"
./web/public/catalog.json:100:      "suggested_label": "GOES-West ABI Band 2 red visible reflectance (0.64 μm)",
./web/public/catalog.json:101:      "slug": "GOES-West_ABI_Band2_Red_Visible",
./web/public/catalog.json:103:      "attribution": "NASA GIBS",
./web/public/catalog.json:104:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Band2_Red_Visible/{z}/{y}/{x}.jpg"
./web/public/catalog.json:108:      "suggested_label": "GOES-East ABI Air Mass RGB (air mass type, jet streaks, cyclogenesis context)",
./web/public/catalog.json:109:      "slug": "GOES-East_ABI_Air_Mass",
./web/public/catalog.json:111:      "attribution": "NASA GIBS",
./web/public/catalog.json:112:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Air_Mass/{z}/{y}/{x}.jpg"
./web/public/catalog.json:116:      "suggested_label": "GOES-West ABI Air Mass RGB (air mass type, jet streaks, cyclogenesis context)",
./web/public/catalog.json:117:      "slug": "GOES-West_ABI_Air_Mass",
./web/public/catalog.json:119:      "attribution": "NASA GIBS",
./web/public/catalog.json:120:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Air_Mass/{z}/{y}/{x}.jpg"
./web/public/catalog.json:124:      "suggested_label": "GOES-East ABI Dust RGB (lofted dust/sand detection)",
./web/public/catalog.json:125:      "slug": "GOES-East_ABI_Dust",
./web/public/catalog.json:127:      "attribution": "NASA GIBS",
./web/public/catalog.json:128:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Dust/{z}/{y}/{x}.jpg"
./web/public/catalog.json:132:      "suggested_label": "GOES-West ABI Dust RGB (lofted dust/sand detection)",
./web/public/catalog.json:133:      "slug": "GOES-West_ABI_Dust",
./web/public/catalog.json:135:      "attribution": "NASA GIBS",
./web/public/catalog.json:136:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Dust/{z}/{y}/{x}.jpg"
./web/public/catalog.json:140:      "suggested_label": "GOES-East ABI Fire Temperature RGB (active fire hot spots/thermal signatures)",
./web/public/catalog.json:141:      "slug": "GOES-East_ABI_FireTemp",
./web/public/catalog.json:143:      "attribution": "NASA GIBS",
./web/public/catalog.json:144:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_FireTemp/{z}/{y}/{x}.jpg"
./web/public/catalog.json:148:      "suggested_label": "GOES-West ABI Fire Temperature RGB (active fire hot spots/thermal signatures)",
./web/public/catalog.json:149:      "slug": "GOES-West_ABI_FireTemp",
./web/public/catalog.json:151:      "attribution": "NASA GIBS",
./web/public/catalog.json:152:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_FireTemp/{z}/{y}/{x}.jpg"
./web/public/catalog.json:159:      "attribution": "NASA GIBS",
./web/public/catalog.json:160:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_Thermal_Anomalies_375m_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:168:      "attribution": "NASA GIBS",
./web/public/catalog.json:169:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_NOAA20_Thermal_Anomalies_375m_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:177:      "attribution": "NASA GIBS",
./web/public/catalog.json:178:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_Thermal_Anomalies_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:186:      "attribution": "NASA GIBS",
./web/public/catalog.json:187:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_Thermal_Anomalies_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:195:      "attribution": "NASA GIBS",
./web/public/catalog.json:196:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/IMERG_Precipitation_Rate_30min/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:204:      "attribution": "NASA GIBS",
./web/public/catalog.json:205:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GHRSST_L4_MUR_Sea_Surface_Temperature/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:213:      "attribution": "NASA GIBS",
./web/public/catalog.json:214:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AMSR2_Sea_Ice_Concentration/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:222:      "attribution": "NASA GIBS",
./web/public/catalog.json:223:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_Snow_Cover/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:231:      "attribution": "NASA GIBS",
./web/public/catalog.json:232:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_Snow_Cover/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:240:      "attribution": "NASA GIBS",
./web/public/catalog.json:241:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/SMAP_Soil_Moisture/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:249:      "attribution": "NASA GIBS",
./web/public/catalog.json:250:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_Aerosol_Optical_Depth/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:258:      "attribution": "NASA GIBS",
./web/public/catalog.json:259:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_Aerosol_Optical_Depth/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:267:      "attribution": "NASA GIBS",
./web/public/catalog.json:268:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/OMI_Aerosol_Index/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:276:      "attribution": "NASA GIBS",
./web/public/catalog.json:277:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/OMI_NO2_Tropospheric_Column/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:285:      "attribution": "NASA GIBS",
./web/public/catalog.json:286:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MOPITT_CO_Total_Column/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:294:      "attribution": "NASA GIBS",
./web/public/catalog.json:295:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AIRS_L2_Methane_400hPa_Day/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:303:      "attribution": "NASA GIBS",
./web/public/catalog.json:304:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AIRS_L2_Carbon_Monoxide_500hPa_Day/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:312:      "attribution": "NASA GIBS",
./web/public/catalog.json:313:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AIRS_L2_RelativeHumidity_500hPa_Day/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:321:      "attribution": "NASA GIBS",
./web/public/catalog.json:322:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MERRA2_2m_Air_Temperature_Monthly/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:330:      "attribution": "NASA GIBS",
./web/public/catalog.json:331:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MERRA2_Total_Precipitable_Water_Vapor_Monthly/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:339:      "attribution": "NASA GIBS",
./web/public/catalog.json:340:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GRACE_Tellus_Liquid_Water_Equivalent_Thickness/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/public/catalog.json:348:      "attribution": "NASA GIBS",
./web/public/catalog.json:349:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/BlueMarble_NextGeneration/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpeg",
./web/public/catalog.json:357:      "attribution": "NASA GIBS",
./web/public/catalog.json:358:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/ASTER_GDEM_Greyscale_Shaded_Relief/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/src/state/state-store.ts:56:  gibsTimestamps: string[]; // Available GIBS times (ISO)
./web/src/state/state-store.ts:179:          '{TILE_BASE}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=GOES-East_ABI_GeoColor&format=jpg&time={time}&z={z}&x={x}&y={y}',
./web/src/state/state-store.js:111:                templateRaw: '{TILE_BASE}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=GOES-East_ABI_GeoColor&format=jpg&time={time}&z={z}&x={x}&y={y}',
./web/src/components/components-Panel.js:96:    // Fetch GIBS timestamps when 3D + gibs active and none loaded yet
./web/src/components/components-Panel.js:122:                }) })), mode === '3d' && gibsOn && (_jsxs(Stack, { gap: 6, mt: "sm", children: [_jsx(Divider, { label: _jsx(Text, { size: "xs", fw: 600, children: "GIBS Time" }), labelPosition: "left" }), gibsTimestamps.length === 0 && (_jsx(Text, { size: "xs", c: "dimmed", children: "Loading timestamps\u2026" })), gibsTimestamps.length > 0 && (_jsx(NativeSelect, { size: "xs", value: gibsSelectedTime || '', onChange: (e) => setGibsSelectedTime(e.currentTarget.value || null), data: gibsTimestamps.map((t) => ({ value: t, label: t })) })), gibsTimestamps.length > 0 && (_jsxs(Group, { gap: 4, children: [_jsx(ActionIcon, { variant: "light", onClick: () => stepGibsTime(-1), "aria-label": "Previous timestamp", disabled: !gibsTimestamps.length, children: _jsx(IconChevronLeft, { size: 16 }) }), _jsx(ActionIcon, { variant: "filled", color: "storm", onClick: toggleGibsPlaying, "aria-label": gibsPlaying ? 'Pause' : 'Play', children: gibsPlaying ? _jsx(IconPlayerPause, { size: 16 }) : _jsx(IconPlayerPlay, { size: 16 }) }), _jsx(ActionIcon, { variant: "light", onClick: () => stepGibsTime(1), "aria-label": "Next timestamp", disabled: !gibsTimestamps.length, children: _jsx(IconChevronRight, { size: 16 }) }), _jsx(NativeSelect, { size: "xs", value: String(gibsPlaybackSpeedMs), onChange: (e) => setGibsPlaybackSpeed(Number(e.currentTarget.value)), data: [
./web/src/components/components-Panel.tsx:131:  // Fetch GIBS timestamps when 3D + gibs active and none loaded yet
./web/src/components/components-Panel.tsx:263:                GIBS Time
./web/src/vite-env.d.ts:7:  readonly VITE_GIBS_WMTS_TILE_URL?: string;
./web/src/util/util-gibs.test.ts:6:    const base = '/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg';
./web/src/util/util-gibs.test.ts:11:    const base = '/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg';
./web/src/util/playback.test.js:4:describe('GIBS FPS clamp', () => {
./web/src/util/playback.test.js:16:        await prefetchNextTile('GOES-East_ABI_GeoColor', 2, 1, 0, '2025-08-24T19:00:00Z');
./web/src/util/util-gibs.js:48:    const guessedExt = ext ?? (layerId.startsWith('GOES-') ? 'jpg' : 'png');
./web/src/util/util-gibs.test.js:5:        const base = '/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg';
./web/src/util/util-gibs.test.js:10:        const base = '/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg';
./web/src/util/playback.test.ts:5:describe('GIBS FPS clamp', () => {
./web/src/util/playback.test.ts:18:    await prefetchNextTile('GOES-East_ABI_GeoColor', 2, 1, 0, '2025-08-24T19:00:00Z');
./web/src/util/util-gibs.ts:63:  const guessedExt = ext ?? (layerId.startsWith('GOES-') ? 'jpg' : 'png');
./web/src/ui/App.js:85:                            templateRaw: `${base}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=GOES-East_ABI_GeoColor&format=jpg&time={time}&z={z}&x={x}&y={y}`,
./web/src/ui/App.js:90:                        templateRaw: `${base}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=${encodeURIComponent(l.id)}&time={time}&z={z}&x={x}&y={y}`,
./web/src/ui/App.js:213:    return (_jsxs(AppShell, { header: { height: 0 }, navbar: { width: 360, breakpoint: 'sm', collapsed: { mobile: false } }, padding: 0, children: [_jsx(AppShell.Navbar, { p: "xs", children: _jsx(ScrollArea, { style: { height: '100%' }, children: _jsx(CatalogPanel, { onSelect: setActiveLayerSlug, activeLayerSlug: activeLayerSlug }) }) }), _jsxs(AppShell.Main, { style: { position: 'relative' }, children: [mode === '2d' && (_jsx(_Fragment, { children: _jsx(Map, { activeLayerSlug: activeLayerSlug, catalog: mappedCatalog, onMapReady: setMapInstance, currentTime: currentTime }) })), mode === '3d' && canUse3D && _jsx(Globe3DLoader, {}), _jsx(ModeSwitch, { mode: mode, setMode: setMode, canUse3D: canUse3D }), mode === '3d' && canUse3D && (_jsx(Paper, { withBorder: true, shadow: "sm", p: "xs", style: { position: 'absolute', top: 70, right: 8, zIndex: 20 }, children: _jsx(Checkbox, { size: "xs", label: "GIBS GeoColor", checked: gibsGeocolor3d, onChange: () => toggleGibsGeocolor3d() }) })), _jsx(Paper, { withBorder: true, shadow: "sm", p: "xs", style: { position: 'absolute', left: 8, top: 8, zIndex: 15 }, children: _jsxs(Group, { gap: 6, align: "center", children: [_jsx(Text, { size: "xs", c: "dimmed", children: "Catalog Demo" }), _jsx(MantineButton, { size: "xs", variant: "light", color: "storm", children: "Mantine" })] }) }), _jsxs(Paper, { withBorder: true, shadow: "sm", p: "xs", style: {
./web/src/ui/App.tsx:101:              templateRaw: `${base}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=GOES-East_ABI_GeoColor&format=jpg&time={time}&z={z}&x={x}&y={y}`,
./web/src/ui/App.tsx:106:            templateRaw: `${base}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=${encodeURIComponent(l.id)}&time={time}&z={z}&x={x}&y={y}`,
./web/src/ui/App.tsx:286:              label="GIBS GeoColor"
./web/src/map/cesium/CesiumGlobe.js:74:    // Reactive GIBS layer (simple check each render; could optimize w/ ref)
./web/src/map/cesium/CesiumGlobe.js:94:                return credit && /GOES-East GeoColor/i.test(credit.html || '');
./web/src/map/cesium/CesiumGlobe.js:101:                const template = import.meta.env.VITE_GIBS_WMTS_TILE_URL ||
./web/src/map/cesium/CesiumGlobe.js:102:                    '/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg?time={time}';
./web/src/map/cesium/CesiumGlobe.js:108:                        credit: 'GOES-East GeoColor (NASA GIBS)',
./web/src/map/cesium/CesiumGlobe.js:117:                        credit: 'GOES-East GeoColor (NASA GIBS)',
./web/src/map/cesium/CesiumGlobe.tsx:87:  // Reactive GIBS layer (simple check each render; could optimize w/ ref)
./web/src/map/cesium/CesiumGlobe.tsx:106:          return credit && /GOES-East GeoColor/i.test(credit.html || '');
./web/src/map/cesium/CesiumGlobe.tsx:116:          import.meta.env.VITE_GIBS_WMTS_TILE_URL ||
./web/src/map/cesium/CesiumGlobe.tsx:117:          '/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg?time={time}';
./web/src/map/cesium/CesiumGlobe.tsx:123:            credit: 'GOES-East GeoColor (NASA GIBS)',
./web/src/map/cesium/CesiumGlobe.tsx:131:            credit: 'GOES-East GeoColor (NASA GIBS)',
./web/dist/catalog.json:18:      "attribution": "NASA GIBS",
./web/dist/catalog.json:19:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/dist/catalog.json:27:      "attribution": "NASA GIBS",
./web/dist/catalog.json:28:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/dist/catalog.json:36:      "attribution": "NASA GIBS",
./web/dist/catalog.json:37:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/dist/catalog.json:45:      "attribution": "NASA GIBS",
./web/dist/catalog.json:46:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_NOAA20_CorrectedReflectance_TrueColor/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/dist/catalog.json:54:      "attribution": "NASA GIBS",
./web/dist/catalog.json:55:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_DayNightBand_At_Sensor_Radiance/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:60:      "suggested_label": "GOES-East ABI GeoColor (daytime true-color blend, nighttime IR blend)",
./web/dist/catalog.json:61:      "slug": "GOES-East_ABI_GeoColor",
./web/dist/catalog.json:63:      "attribution": "NASA GIBS",
./web/dist/catalog.json:64:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_GeoColor/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:68:      "suggested_label": "GOES-West ABI GeoColor (daytime true-color blend, nighttime IR blend)",
./web/dist/catalog.json:69:      "slug": "GOES-West_ABI_GeoColor",
./web/dist/catalog.json:71:      "attribution": "NASA GIBS",
./web/dist/catalog.json:72:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_GeoColor/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:76:      "suggested_label": "GOES-East ABI Band 13 “clean” longwave IR (cloud-top temperature/structure)",
./web/dist/catalog.json:77:      "slug": "GOES-East_ABI_Band13_Clean_IR",
./web/dist/catalog.json:79:      "attribution": "NASA GIBS",
./web/dist/catalog.json:80:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Band13_Clean_IR/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:84:      "suggested_label": "GOES-West ABI Band 13 “clean” longwave IR (cloud-top temperature/structure)",
./web/dist/catalog.json:85:      "slug": "GOES-West_ABI_Band13_Clean_IR",
./web/dist/catalog.json:87:      "attribution": "NASA GIBS",
./web/dist/catalog.json:88:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Band13_Clean_IR/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:92:      "suggested_label": "GOES-East ABI Band 2 red visible reflectance (0.64 μm)",
./web/dist/catalog.json:93:      "slug": "GOES-East_ABI_Band2_Red_Visible",
./web/dist/catalog.json:95:      "attribution": "NASA GIBS",
./web/dist/catalog.json:96:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Band2_Red_Visible/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:100:      "suggested_label": "GOES-West ABI Band 2 red visible reflectance (0.64 μm)",
./web/dist/catalog.json:101:      "slug": "GOES-West_ABI_Band2_Red_Visible",
./web/dist/catalog.json:103:      "attribution": "NASA GIBS",
./web/dist/catalog.json:104:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Band2_Red_Visible/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:108:      "suggested_label": "GOES-East ABI Air Mass RGB (air mass type, jet streaks, cyclogenesis context)",
./web/dist/catalog.json:109:      "slug": "GOES-East_ABI_Air_Mass",
./web/dist/catalog.json:111:      "attribution": "NASA GIBS",
./web/dist/catalog.json:112:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Air_Mass/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:116:      "suggested_label": "GOES-West ABI Air Mass RGB (air mass type, jet streaks, cyclogenesis context)",
./web/dist/catalog.json:117:      "slug": "GOES-West_ABI_Air_Mass",
./web/dist/catalog.json:119:      "attribution": "NASA GIBS",
./web/dist/catalog.json:120:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Air_Mass/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:124:      "suggested_label": "GOES-East ABI Dust RGB (lofted dust/sand detection)",
./web/dist/catalog.json:125:      "slug": "GOES-East_ABI_Dust",
./web/dist/catalog.json:127:      "attribution": "NASA GIBS",
./web/dist/catalog.json:128:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_Dust/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:132:      "suggested_label": "GOES-West ABI Dust RGB (lofted dust/sand detection)",
./web/dist/catalog.json:133:      "slug": "GOES-West_ABI_Dust",
./web/dist/catalog.json:135:      "attribution": "NASA GIBS",
./web/dist/catalog.json:136:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_Dust/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:140:      "suggested_label": "GOES-East ABI Fire Temperature RGB (active fire hot spots/thermal signatures)",
./web/dist/catalog.json:141:      "slug": "GOES-East_ABI_FireTemp",
./web/dist/catalog.json:143:      "attribution": "NASA GIBS",
./web/dist/catalog.json:144:      "tile_url_template": "/api/gibs/tile/GOES-East_ABI_FireTemp/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:148:      "suggested_label": "GOES-West ABI Fire Temperature RGB (active fire hot spots/thermal signatures)",
./web/dist/catalog.json:149:      "slug": "GOES-West_ABI_FireTemp",
./web/dist/catalog.json:151:      "attribution": "NASA GIBS",
./web/dist/catalog.json:152:      "tile_url_template": "/api/gibs/tile/GOES-West_ABI_FireTemp/{z}/{y}/{x}.jpg"
./web/dist/catalog.json:159:      "attribution": "NASA GIBS",
./web/dist/catalog.json:160:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_SNPP_Thermal_Anomalies_375m_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:168:      "attribution": "NASA GIBS",
./web/dist/catalog.json:169:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/VIIRS_NOAA20_Thermal_Anomalies_375m_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:177:      "attribution": "NASA GIBS",
./web/dist/catalog.json:178:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_Thermal_Anomalies_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:186:      "attribution": "NASA GIBS",
./web/dist/catalog.json:187:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_Thermal_Anomalies_All/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:195:      "attribution": "NASA GIBS",
./web/dist/catalog.json:196:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/IMERG_Precipitation_Rate_30min/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:204:      "attribution": "NASA GIBS",
./web/dist/catalog.json:205:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GHRSST_L4_MUR_Sea_Surface_Temperature/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:213:      "attribution": "NASA GIBS",
./web/dist/catalog.json:214:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AMSR2_Sea_Ice_Concentration/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:222:      "attribution": "NASA GIBS",
./web/dist/catalog.json:223:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_Snow_Cover/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:231:      "attribution": "NASA GIBS",
./web/dist/catalog.json:232:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_Snow_Cover/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:240:      "attribution": "NASA GIBS",
./web/dist/catalog.json:241:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/SMAP_Soil_Moisture/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:249:      "attribution": "NASA GIBS",
./web/dist/catalog.json:250:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Terra_Aerosol_Optical_Depth/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:258:      "attribution": "NASA GIBS",
./web/dist/catalog.json:259:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MODIS_Aqua_Aerosol_Optical_Depth/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:267:      "attribution": "NASA GIBS",
./web/dist/catalog.json:268:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/OMI_Aerosol_Index/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:276:      "attribution": "NASA GIBS",
./web/dist/catalog.json:277:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/OMI_NO2_Tropospheric_Column/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:285:      "attribution": "NASA GIBS",
./web/dist/catalog.json:286:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MOPITT_CO_Total_Column/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:294:      "attribution": "NASA GIBS",
./web/dist/catalog.json:295:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AIRS_L2_Methane_400hPa_Day/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:303:      "attribution": "NASA GIBS",
./web/dist/catalog.json:304:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AIRS_L2_Carbon_Monoxide_500hPa_Day/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:312:      "attribution": "NASA GIBS",
./web/dist/catalog.json:313:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/AIRS_L2_RelativeHumidity_500hPa_Day/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:321:      "attribution": "NASA GIBS",
./web/dist/catalog.json:322:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MERRA2_2m_Air_Temperature_Monthly/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:330:      "attribution": "NASA GIBS",
./web/dist/catalog.json:331:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/MERRA2_Total_Precipitable_Water_Vapor_Monthly/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:339:      "attribution": "NASA GIBS",
./web/dist/catalog.json:340:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/GRACE_Tellus_Liquid_Water_Equivalent_Thickness/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.png",
./web/dist/catalog.json:348:      "attribution": "NASA GIBS",
./web/dist/catalog.json:349:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/BlueMarble_NextGeneration/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpeg",
./web/dist/catalog.json:357:      "attribution": "NASA GIBS",
./web/dist/catalog.json:358:      "tile_url_template": "https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/ASTER_GDEM_Greyscale_Shaded_Relief/default/{time}/GoogleMapsCompatible_Level9/{z}/{y}/{x}.jpg",
./web/dist/assets/Globe3D-BG2QDSLE.js:2:import{r as n,u as x,j as S}from"./mantine-CVbcCChH.js";import{u as a,_ as I}from"./index-DFT7aB0H.js";import{V as M,E as A,U as g,C as R,P as L,a as D}from"./cesium-DgLDXkn8.js";import"./react-Dvwkxfce.js";import"./maplibre-BhfqkIys.js";const N=40075016;function V(u){const m=Math.pow(2,u);return N/(256*m)*960}function j(){var C;const u=n.useRef(null),m=x(),d=a(e=>e.view),_=a(e=>e.setView),G=a(e=>e.setMode),[c,O]=n.useState(!1);n.useEffect(()=>{let e=!1;try{const t=new M(u.current,{animation:!1,timeline:!1,baseLayerPicker:!1,geocoder:!1,homeButton:!1,navigationHelpButton:!1,sceneModePicker:!1,terrainProvider:new A}),o="/api/cartodb/plight_all/{z}/{x}/{y}@2x.png";try{const s=new g({url:o,credit:"Tiles © CartoDB, Data © OpenStreetMap contributors",minimumLevel:0,maximumLevel:18}),p=t.imageryLayers.get(0);p&&t.imageryLayers.remove(p,!0),t.imageryLayers.addImageryProvider(s,0)}catch(s){console.warn("CesiumGlobe: operation failed",s.message)}const i=V(d.zoom);t.camera.setView({destination:R.fromDegrees(d.lon,d.lat,i)});let r=null;t.camera.changed.addEventListener(()=>{if(r)return;r=setTimeout(()=>{r=null},400);const s=t.camera.positionCartographic;_({lat:s.latitude*180/Math.PI,lon:s.longitude*180/Math.PI})}),e||O(!0),f.current=t}catch(t){console.error("Cesium init failed; reverting to 2D",t),G("2d")}return()=>{e=!0}},[]);const f=n.useRef(null),l=n.useRef(null),v=a(e=>e.gibsGeocolor3d),b=a(e=>e.gibsSelectedTime),w=a(e=>e.gibsTimestamps),E=a(e=>e.showFirms3d),y=a(e=>e.showOwmTemp3d);return n.useEffect(()=>{(async()=>{if(!c)return;const e=f.current;if(!e)return;const t=e.imageryLayers,o=t._layers.find(i=>{const r=i._credit;return r&&/GOES-East GeoColor/i.test(r.html||"")});if(v){b||w[w.length-1]||new Date().toISOString().slice(0,19)+"";const i="/api/gibs/geocolor/{TileMatrix}/{TileCol}/{TileRow}.jpg";if(o){t.remove(o,!0);const r=new g({url:i,credit:"GOES-East GeoColor (NASA GIBS)"});t.addImageryProvider(r,1)}else{const r=new g({url:i,credit:"GOES-East GeoColor (NASA GIBS)"});t.addImageryProvider(r,1)}}else!v&&o&&t.remove(o,!0)})()},[v,c,b,w]),n.useEffect(()=>{(async()=>{if(!c)return;const e=f.current;if(e){if(!E){if(l.current){try{e.scene.primitives.remove(l.current)}catch(t){console.warn("CesiumGlobe: operation failed",t.message)}l.current=null}return}if(!l.current)try{const t=await fetch("/api/firms/VIIRS_NOAA20_NRT/1");if(!t.ok)return;const o=await t.text(),{firmsCsvToGeoJSON:i}=await I(async()=>{const{firmsCsvToGeoJSON:h}=await import("./index-DFT7aB0H.js").then(T=>T.a);return{firmsCsvToGeoJSON:h}},__vite__mapDeps([0,1,2,3,4])),r=i(o),s=new L;l.current=s;const p=D.ORANGERED.withAlpha(.85);for(const h of r.features){const[T,P]=h.geometry.coordinates;s.add({position:R.fromDegrees(T,P,0),color:p,pixelSize:6})}e.scene.primitives.add(s)}catch{}}})()},[E,c]),n.useEffect(()=>{(async()=>{if(!c)return;const e=f.current;if(!e)return;const t=e.imageryLayers,o=t._layers.find(i=>{const r=i._credit;return r&&/OWM Temperature/i.test(r.html||"")});if(!y&&o){t.remove(o,!0);return}if(y&&!o){const i="/api/owm/tiles/temp_new/{z}/{x}/{y}.png",r=new g({url:i,credit:"OWM Temperature (OpenWeatherMap)"});t.addImageryProvider(r,2)}})()},[y,c]),S.jsx("div",{ref:u,style:{position:"absolute",inset:0,background:((C=m.colors.dark)==null?void 0:C[9])||m.black,visibility:c?"visible":"hidden"}})}function F(){return S.jsx(j,{})}export{F as default};
./web/dist/assets/index-DFT7aB0H.js:85: */var Sn;function Tc(){if(Sn)return jt;Sn=1;var e=Vn(),t=Ac();function n(u,l){return u===l&&(u!==0||1/u===1/l)||u!==u&&l!==l}var r=typeof Object.is=="function"?Object.is:n,o=t.useSyncExternalStore,s=e.useRef,i=e.useEffect,a=e.useMemo,c=e.useDebugValue;return jt.useSyncExternalStoreWithSelector=function(u,l,h,y,g){var b=s(null);if(b.current===null){var z={hasValue:!1,value:null};b.current=z}else z=b.current;b=a(function(){function x(C){if(!w){if(w=!0,_=C,C=y(C),g!==void 0&&z.hasValue){var O=z.value;if(g(O,C))return v=O}return v=C}if(O=v,r(_,C))return O;var R=y(C);return g!==void 0&&g(O,R)?(_=C,O):(_=C,v=R)}var w=!1,_,v,E=h===void 0?null:h;return[function(){return x(l())},E===null?void 0:function(){return x(E())}]},[l,h,y,g]);var S=o(u,b[0],b[1]);return i(function(){z.hasValue=!0,z.value=S},[S]),c(S),S},jt}var En;function Dc(){return En||(En=1,$t.exports=Tc()),$t.exports}var Rc=Dc();const Fc=Hn(Rc),wr={},{useDebugValue:Lc}=Kn,{useSyncExternalStoreWithSelector:Uc}=Fc;let Pn=!1;const Nc=e=>e;function qc(e,t=Nc,n){(wr?"production":void 0)!=="production"&&n&&!Pn&&(console.warn("[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"),Pn=!0);const r=Uc(e.subscribe,e.getState,e.getServerState||e.getInitialState,t,n);return Lc(r),r}const $n=e=>{(wr?"production":void 0)!=="production"&&typeof e!="function"&&console.warn("[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.");const t=typeof e=="function"?Mc(e):e,n=(r,o)=>qc(t,r,o);return Object.assign(n,t),n},Gc=e=>e?$n(e):$n;var jn={};function Bt(){const e=typeof process<"u"&&jn?jn.VITE_ENABLE_3D:void 0;let t;try{t="0"}catch{t=void 0}return(e??t)==="1"}function _r(){if(typeof window>"u")return"2d";const t=(new URLSearchParams(window.location.search).get("mode")??"").toLowerCase();let n="";return!t&&window.location.hash&&(n=(new URLSearchParams(window.location.hash.replace(/^#/,"")).get("mode")??"").toLowerCase()),(t||n)==="3d"?"3d":"2d"}function Bc(){const e=_r(),t=Bt();return e==="3d"&&t?"3d":"2d"}function Qc(){const e=_r(),t=Bt();return e==="3d"&&t?"3d":"2d"}const Cn=new Date().toISOString().slice(0,10),G=Gc((e,t)=>({layers:[],time:Cn,playing:!1,playbackBaseStartMs:(()=>{const n=new Date;return n.setMinutes(0,0,0),n.getTime()-24*36e5})(),playbackHoursSpan:48,playbackCurrentTimeMs:(()=>{const n=new Date;return n.setMinutes(0,0,0),n.getTime()})(),playbackSpeed:"1x",view:{lat:33.448,lon:-112.074,zoom:6},mode:Bc(),gibsGeocolor3d:!1,gibsTimestamps:[],gibsSelectedTime:null,gibsPlaying:!1,gibsPlaybackSpeedMs:1500,gibsFps:4,gibsLoadError:null,showFirms3d:!1,showOwmTemp3d:!1,addLayer:n=>e(r=>({layers:r.layers.find(o=>o.id===n.id)?r.layers:[...r.layers,n]})),removeLayer:n=>e(r=>({layers:r.layers.filter(o=>o.id!==n)})),setTime:n=>e({time:n}),stepTime:n=>{const r=new Date(t().time+"T00:00:00Z");r.setDate(r.getDate()+n),e({time:r.toISOString().slice(0,10)})},setOpacity:(n,r)=>e(o=>({layers:o.layers.map(s=>s.id===n?{...s,opacity:r}:s)})),togglePlaying:()=>e(n=>({playing:!n.playing})),setPlaybackCurrentTimeMs:n=>e({playbackCurrentTimeMs:n}),setPlaybackSpeed:n=>e({playbackSpeed:n}),setPlaybackBaseStart:n=>e({playbackBaseStartMs:n}),setPlaybackHoursSpan:n=>e({playbackHoursSpan:n}),setView:n=>e(r=>({view:{...r.view,...n}})),setMode:n=>e({mode:n}),updateModeFromLocation:()=>e({mode:Qc()}),toggleGibsGeocolor3d:()=>e(n=>({gibsGeocolor3d:!n.gibsGeocolor3d})),setGibsTimestamps:n=>e({gibsTimestamps:n}),setGibsSelectedTime:n=>e({gibsSelectedTime:n}),toggleGibsPlaying:()=>e(n=>({gibsPlaying:!n.gibsPlaying})),stepGibsTime:n=>e(r=>{const{gibsTimestamps:o,gibsSelectedTime:s}=r;if(!o.length)return{};const a=((s?Math.max(0,o.indexOf(s)):o.length-1)+n+o.length)%o.length;return{gibsSelectedTime:o[a]}}),setGibsPlaybackSpeed:n=>e({gibsPlaybackSpeedMs:n}),setGibsFps:n=>e(()=>{const r=Math.min(8,Math.max(2,Math.round(n))),o=Math.round(1e3/r);return{gibsFps:r,gibsPlaybackSpeedMs:o}}),setGibsLoadError:n=>e({gibsLoadError:n}),toggleFirms3d:()=>e(n=>({showFirms3d:!n.showFirms3d})),toggleOwmTemp3d:()=>e(n=>({showOwmTemp3d:!n.showOwmTemp3d})),replaceLayers:n=>e({layers:n}),reset:()=>e({layers:[],time:Cn,playing:!1})}));function Wc({onSelect:e,activeLayerSlug:t}){const n=G(f=>f.mode),r=G(f=>f.gibsGeocolor3d),o=G(f=>f.gibsTimestamps),s=G(f=>f.setGibsTimestamps),i=G(f=>f.gibsSelectedTime),a=G(f=>f.setGibsSelectedTime),c=G(f=>f.gibsPlaying),u=G(f=>f.toggleGibsPlaying),l=G(f=>f.stepGibsTime),h=G(f=>f.gibsPlaybackSpeedMs),y=G(f=>f.setGibsPlaybackSpeed),g=G(f=>f.showFirms3d),b=G(f=>f.toggleFirms3d),z=G(f=>f.showOwmTemp3d),S=G(f=>f.toggleOwmTemp3d),[x,w]=k.useState(null);k.useEffect(()=>{fetch("/catalog.json").then(async f=>{try{const Z=await f.json();try{return br(Array.isArray(Z)?Z:Z.layers||Z).map(L=>{const M=L;return{slug:L.slug,category:typeof M.category=="string"?M.category:"General",suggested_label:typeof M.suggested_label=="string"?M.suggested_label:typeof M.name=="string"?M.name:L.slug,source_type:typeof M.type=="string"?M.type:void 0,notes:typeof M.notes=="string"?M.notes:void 0,attribution:typeof M.attribution=="string"?M.attribution:void 0}})}catch(A){return console.warn("Catalog validation failed (panel)",A),Z}}catch{return null}}).then(f=>{f&&(Array.isArray(f)?w(f):f&&Array.isArray(f.layers)&&w(f.layers))}).catch(()=>{})},[]);const _=k.useMemo(()=>x?x.reduce((f,Z)=>{const A=Z.category||"Other";return(f[A]=f[A]||[]).push(Z),f},{}):{},[x]),v=k.useMemo(()=>Object.keys(_).sort(),[_]),[E,C]=k.useState(()=>v.slice(0,3));k.useEffect(()=>{C(f=>{if(f.length===0)return f;const Z=f.filter(A=>v.includes(A));return Z.length===f.length?f:Z})},[v.join(",")]);const O=()=>C(v),R=()=>C([]);return k.useEffect(()=>{n!=="3d"||!r||o.length>0||fetch("/api/gibs/timestamps").then(f=>f.json()).then(f=>{Array.isArray(f)&&(s(f),f.length>0&&a(f[f.length-1]))}).catch(()=>{})},[n,r,o.length]),m.jsxs(et,{gap:"sm",p:0,style:{fontSize:13},children:[m.jsxs(se,{gap:"xs",wrap:"nowrap",justify:"space-between",children:[m.jsxs(se,{gap:"xs",wrap:"nowrap",children:[m.jsx(ee,{fw:600,children:"Layers"}),m.jsx(ut,{size:"xs",variant:"outline",color:"storm",onClick:()=>e(""),children:"Clear"})]}),v.length>0&&m.jsxs(se,{gap:4,wrap:"nowrap",children:[m.jsx(St,{label:"Expand all",children:m.jsx(ze,{size:"sm",variant:"light","aria-label":"Expand all sections",onClick:O,disabled:E.length===v.length,children:m.jsx(ro,{size:16})})}),m.jsx(St,{label:"Collapse all",children:m.jsx(ze,{size:"sm",variant:"light","aria-label":"Collapse all sections",onClick:R,disabled:E.length===0,children:m.jsx(so,{size:16})})})]})]}),!x&&m.jsx(ee,{size:"xs",c:"dimmed",children:"Loading palette…"}),x&&m.jsx(tt,{multiple:!0,chevronPosition:"left",variant:"contained",value:E,onChange:f=>C(Array.isArray(f)?f:[]),children:v.map(f=>{const Z=_[f];return m.jsxs(tt.Item,{value:f,children:[m.jsx(tt.Control,{children:m.jsxs(se,{justify:"space-between",wrap:"nowrap",children:[m.jsx(ee,{size:"sm",fw:600,children:f}),m.jsx(Ar,{size:"xs",variant:"light",color:"storm",children:Z.length})]})}),m.jsx(tt.Panel,{children:m.jsx(et,{gap:4,children:Z.map(A=>{const J=A.slug,L=A.suggested_label,M=J===t;return m.jsx(ke,{withBorder:!0,p:6,radius:"sm",shadow:M?"sm":void 0,style:{cursor:"pointer"},onClick:()=>e(M?"":J),children:m.jsxs(se,{justify:"space-between",gap:6,wrap:"nowrap",children:[m.jsxs(se,{gap:6,wrap:"nowrap",children:[m.jsx(ct,{"aria-label":`Toggle ${L}`,checked:M,onChange:()=>e(M?"":J)}),m.jsx(ee,{size:"xs",style:{maxWidth:160},lineClamp:1,children:L})]}),(A.notes||A.attribution)&&m.jsx(St,{label:(A.notes||"")+(A.attribution?` | ${A.attribution}`:""),children:m.jsx(ze,{variant:"subtle","aria-label":"Layer info",children:m.jsx(ho,{size:14})})})]})},J)})})})]},f)})}),n==="3d"&&r&&m.jsxs(et,{gap:6,mt:"sm",children:[m.jsx(en,{label:m.jsx(ee,{size:"xs",fw:600,children:"GIBS Time"}),labelPosition:"left"}),o.length===0&&m.jsx(ee,{size:"xs",c:"dimmed",children:"Loading timestamps…"}),o.length>0&&m.jsx(tn,{size:"xs",value:i||"",onChange:f=>a(f.currentTarget.value||null),data:o.map(f=>({value:f,label:f}))}),o.length>0&&m.jsxs(se,{gap:4,children:[m.jsx(ze,{variant:"light",onClick:()=>l(-1),"aria-label":"Previous timestamp",disabled:!o.length,children:m.jsx(ao,{size:16})}),m.jsx(ze,{variant:"filled",color:"storm",onClick:u,"aria-label":c?"Pause":"Play",children:c?m.jsx(Yn,{size:16}):m.jsx(Jn,{size:16})}),m.jsx(ze,{variant:"light",onClick:()=>l(1),"aria-label":"Next timestamp",disabled:!o.length,children:m.jsx(uo,{size:16})}),m.jsx(tn,{size:"xs",value:String(h),onChange:f=>y(Number(f.currentTarget.value)),data:[{value:"2000",label:"0.5x"},{value:"1500",label:"1x"},{value:"800",label:"2x"},{value:"400",label:"4x"}],style:{width:90}})]}),c&&m.jsx(Kc,{})]}),n==="3d"&&m.jsxs(et,{gap:4,mt:"sm",children:[m.jsx(en,{label:m.jsx(ee,{size:"xs",fw:600,children:"3D Data Layers"}),labelPosition:"left"}),m.jsx(ct,{size:"xs",label:"FIRMS Fire Detections",checked:g,onChange:b}),m.jsx(ct,{size:"xs",label:"OWM Temperature Overlay",checked:z,onChange:S})]})]})}function Kc(){const e=G(r=>r.gibsPlaying),t=G(r=>r.gibsPlaybackSpeedMs),n=G(r=>r.stepGibsTime);return k.useEffect(()=>{if(!e)return;const r=setInterval(()=>n(1),t);return()=>clearInterval(r)},[e,t]),null}var Vc=Jr();const Zn=Hn(Vc);function zr(e){const t=e.trim().split(/\r?\n/);if(t.length<2)return{type:"FeatureCollection",features:[]};const n=t[0].split(",").map(g=>g.trim().toLowerCase()),r=n.indexOf("latitude"),o=n.indexOf("longitude"),s=n.indexOf("acq_date"),i=n.indexOf("acq_time"),a=n.indexOf("bright_ti4"),c=n.indexOf("confidence"),u=n.indexOf("frp"),l=n.indexOf("satellite"),h=n.indexOf("daynight"),y=[];for(let g=1;g<t.length;g++){const b=t[g].split(",");if(b.length!==n.length)continue;const z=parseFloat(b[r]),S=parseFloat(b[o]);if(isNaN(z)||isNaN(S))continue;const x=b[s],w=b[i],_=x&&w?`${x}T${w.padStart(4,"0").slice(0,2)}:${w.padStart(4,"0").slice(2,4)}:00Z`:void 0;y.push({type:"Feature",geometry:{type:"Point",coordinates:[S,z]},properties:{brightness:a>=0?Number(b[a]):void 0,confidence:c>=0?b[c]:void 0,frp:u>=0?Number(b[u]):void 0,acq_datetime:_,satellite:l>=0?b[l]:void 0,daynight:h>=0?b[h]:void 0}})}return{type:"FeatureCollection",features:y}}const Uu=Object.freeze(Object.defineProperty({__proto__:null,firmsCsvToGeoJSON:zr},Symbol.toStringTag,{value:"Module"}));function Hc({activeLayerSlug:e,catalog:t,onMapReady:n,currentTime:r}){const o=Tr(),s=k.useRef(null),i=k.useRef(null);console.log("[Map] Map component rendered with props:",{activeLayerSlug:e,catalog:t?"loaded":"null",currentTime:r}),k.useEffect(()=>{if(!i.current){console.log("[Map] Container ref not ready, skipping map initialization");return}console.log("[Map] Initializing map with basemap template:","/api/cartodb/plight_all/{z}/{x}/{y}@2x.png");const u={version:8,sources:{basemap:{type:"raster",tiles:["/api/cartodb/plight_all/{z}/{x}/{y}@2x.png"],tileSize:256}},layers:[{id:"basemap",type:"raster",source:"basemap"}]},l={container:i.current,style:u,center:[-112.074,33.448],zoom:3};console.log("[Map] Creating map with container:",i.current);const h=new Zn.Map(l);h.addControl(new Zn.NavigationControl);const y=h.getCanvas(),g=b=>{b.preventDefault(),console.warn("[Map] WebGL context lost")};return y.addEventListener("webglcontextlost",g,{once:!0}),s.current=h,console.log("[Map] Map created successfully"),n&&n(h),()=>{try{y.removeEventListener("webglcontextlost",g)}catch(b){console.debug("Map: cleanup failed",b.message)}try{h.remove()}catch(b){console.debug("Map: cleanup failed",b.message)}s.current=null}},[i.current]);function a(c,u){if(!c)return new Date(u).toISOString().slice(0,10);const l=new Date(u);if(c==="unix_timestamp")return Math.floor(u/1e3).toString();if(c==="YYYY-MM-DD")return l.toISOString().slice(0,10);if(c==="YYYY-MM-DDTHH:mm:ssZ")return l.toISOString().replace(/\.\d{3}Z$/,"Z");if(c==="YYYY-MM-DDTHHmmZ"){const h=l.toISOString();return h.slice(0,13)+h.slice(14,16)+"Z"}return c==="ISO8601_HOUR"?l.toISOString().slice(0,13)+":00:00Z":l.toISOString()}return k.useEffect(()=>{const c=s.current;if(!c)return;let u=!1;const l=S=>{try{c.getLayer(S)&&c.removeLayer(S)}catch{}},h=S=>{try{c.getSource(S)&&c.removeSource(S)}catch{}};if(["active-raster","active-vector-fill","active-vector-line","active-vector-circle"].forEach(l),["active-raster","active-vector"].forEach(h),!e)return u=!0,()=>{};const g=(Array.isArray(t)?t:t&&Array.isArray(t.layers)?t.layers:[]).find(S=>S.slug===e);if(!g)return u=!0,()=>{};const b=r||Date.now(),z=()=>!!s.current&&s.current===c&&!u;if(g.source_type==="raster"&&g.tile_url_template)try{const S=a(g.time_format,b),x=g.tile_url_template.includes("{time}")?g.tile_url_template.replace("{time}",S):g.tile_url_template;z()&&(c.addSource("active-raster",{type:"raster",tiles:[x],tileSize:256}),c.addLayer({id:"active-raster",type:"raster",source:"active-raster"}))}catch(S){console.warn("[Map] Failed to add raster layer",S)}else if(g.source_type==="vector"&&g.api_endpoint){const S=/\/api\/firms\//.test(g.api_endpoint)||/firms/i.test(g.attribution||"");fetch(g.api_endpoint).then(async x=>{if(!x.ok)throw new Error(`fetch ${g.api_endpoint} ${x.status}`);const w=x.headers.get("content-type")||"";if(S||w.includes("text/csv")){const _=await x.text();return zr(_)}return x.json()}).then(x=>{var w,_,v,E;if(z()&&!c.getSource("active-vector")){c.addSource("active-vector",{type:"geojson",data:x});try{c.addLayer({id:"active-vector-line",type:"line",source:"active-vector",paint:{"line-color":((w=o.colors.storm)==null?void 0:w[6])||o.primaryColor,"line-width":2},filter:["==","$type","LineString"]})}catch{}try{c.addLayer({id:"active-vector-fill",type:"fill",source:"active-vector",paint:{"fill-color":`${((_=o.colors.storm)==null?void 0:_[6])??o.primaryColor}40`,"fill-outline-color":((v=o.colors.storm)==null?void 0:v[6])??o.primaryColor},filter:["==","$type","Polygon"]})}catch{}try{c.addLayer({id:"active-vector-circle",type:"circle",source:"active-vector",paint:{"circle-radius":4,"circle-color":((E=o.colors.storm)==null?void 0:E[7])||o.colors.blue[6],"circle-stroke-color":o.white,"circle-stroke-width":1},filter:["==","$type","Point"]})}catch{}}}).catch(x=>{u||console.warn("[Map] vector fetch failed",x.message||x)})}return()=>{u=!0}},[e,t,r]),k.useEffect(()=>{const c=s.current;if(!c)return;let u=!1;return fetch("/api/alerts").then(l=>l.json()).then(l=>{var h,y,g,b;u||l!=null&&l.features&&(c.getSource("alerts-static")||(c.addSource("alerts-static",{type:"geojson",data:l}),c.addLayer({id:"alerts-static-fill",type:"fill",source:"alerts-static",paint:{"fill-color":`${((h=o.colors.red)==null?void 0:h[6])??((y=o.colors.pink)==null?void 0:y[6])??o.primaryColor}33`,"fill-outline-color":`${((g=o.colors.red)==null?void 0:g[6])??((b=o.colors.pink)==null?void 0:b[6])??o.primaryColor}99`}})))}),()=>{u=!0}},[]),m.jsx("div",{ref:i,style:{width:"100%",height:"100%"}})}const Yc={"0.5x":2e3,"1x":1e3,"2x":500,"4x":250};function Jc({playing:e,togglePlay:t,baseStart:n,hoursSpan:r,currentTime:o,setCurrentTime:s,currentDate:i,setCurrentDate:a,hourValue:c,setHourValue:u,speed:l,setSpeed:h,onTempChange:y,onCommit:g,testEventBridge:b=!1}){const[S,x]=k.useState(c),w=k.useRef(!1),_=k.useRef(null);k.useEffect(()=>{w.current||x(c)},[c]),k.useEffect(()=>{if(!b||!_.current)return;const E=_.current,C=R=>{var A;const Z=((A=R.detail)==null?void 0:A.value)??0;w.current=!0,x(Z),y==null||y(Z)},O=R=>{var A;const Z=((A=R.detail)==null?void 0:A.value)??0;w.current=!1,x(Z),u(Z),s(n+Z*36e5),g==null||g(Z)};return E.addEventListener("temp-change",C),E.addEventListener("commit-change",O),()=>{E.removeEventListener("temp-change",C),E.removeEventListener("commit-change",O)}},[b,n,u,s,y,g]),k.useEffect(()=>{if(!e)return;const E=Yc[l]??1e3,C=setInterval(()=>{const O=n+r*36e5,R=o+36e5,f=R>O?n:R,Z=Math.round((f-n)/36e5);u(Z),s(f)},E);return()=>clearInterval(C)},[e,l,o,n,r,s,u]);const v=new Date(o).toISOString().replace("T"," ").substring(0,16)+"Z";return m.jsx(ke,{withBorder:!0,shadow:"sm",p:"xs",style:{position:"absolute",left:"50%",bottom:12,transform:"translateX(-50%)",zIndex:20,width:"min(720px,92%)"},children:m.jsxs(se,{gap:"xs",wrap:"nowrap",align:"center",children:[m.jsx(ze,{variant:"filled",color:"storm",onClick:t,"aria-label":e?"Pause":"Play",children:e?m.jsx(Yn,{size:16}):m.jsx(Jn,{size:16})}),m.jsx("div",{ref:_,"data-testid":"timebar-slider",style:{flex:1},children:m.jsx(Dr,{value:S,min:0,max:r,step:1,style:{width:"100%"},onChange:E=>{w.current=!0,x(E),y==null||y(E)},onChangeEnd:E=>{w.current=!1,u(E),s(n+E*36e5),g==null||g(E)},marks:[{value:0},{value:Math.floor(r/2)},{value:r}]})}),m.jsx(Rr,{value:i,onChange:E=>{if(!E)return;const C=E,O=C instanceof Date?C:new Date(C);if(Number.isNaN(O.getTime()))return;a(O);const R=new Date(O.getTime());R.setUTCHours(0,0,0,0);const f=(S||0)*36e5;s(R.getTime()+f)},size:"xs",valueFormat:"YYYY-MM-DD","aria-label":"Date"}),m.jsx(Fr,{size:"xs","aria-label":"Playback speed",data:["0.5x","1x","2x","4x"],value:l,onChange:E=>E&&h(E),w:80}),m.jsx(ee,{size:"xs",ff:"monospace",c:"dimmed",style:{minWidth:130,textAlign:"right"},children:v})]})})}function Xc(e){return e?e.split(",").map(t=>{const[n,r]=t.split(":");return{id:n,opacity:r?Number(r):void 0}}):[]}function On(e){e.startsWith("#")&&(e=e.slice(1));const t=new URLSearchParams(e),n={};return t.get("t")&&(n.t=t.get("t")),t.get("z")&&(n.z=Number(t.get("z"))),t.get("lat")&&(n.lat=Number(t.get("lat"))),t.get("lon")&&(n.lon=Number(t.get("lon"))),t.get("l")&&(n.l=t.get("l")),n}function eu(e,t,n,r){var o=this,s=k.useRef(null),i=k.useRef(0),a=k.useRef(0),c=k.useRef(null),u=k.useRef([]),l=k.useRef(),h=k.useRef(),y=k.useRef(e),g=k.useRef(!0);y.current=e;var b=typeof window<"u",z=!t&&t!==0&&b;if(typeof e!="function")throw new TypeError("Expected a function");t=+t||0;var S=!!(n=n||{}).leading,x=!("trailing"in n)||!!n.trailing,w="maxWait"in n,_="debounceOnServer"in n&&!!n.debounceOnServer,v=w?Math.max(+n.maxWait||0,t):null;k.useEffect(function(){return g.current=!0,function(){g.current=!1}},[]);var E=k.useMemo(function(){var C=function(L){var M=u.current,le=l.current;return u.current=l.current=null,i.current=L,a.current=a.current||L,h.current=y.current.apply(le,M)},O=function(L,M){z&&cancelAnimationFrame(c.current),c.current=z?requestAnimationFrame(L):setTimeout(L,M)},R=function(L){if(!g.current)return!1;var M=L-s.current;return!s.current||M>=t||M<0||w&&L-i.current>=v},f=function(L){return c.current=null,x&&u.current?C(L):(u.current=l.current=null,h.current)},Z=function L(){var M=Date.now();if(S&&a.current===i.current&&A(),R(M))return f(M);if(g.current){var le=t-(M-s.current),wt=w?Math.min(le,v-(M-i.current)):le;O(L,wt)}},A=function(){},J=function(){if(b||_){var L=Date.now(),M=R(L);if(u.current=[].slice.call(arguments),l.current=o,s.current=L,M){if(!c.current&&g.current)return i.current=s.current,O(Z,t),S?C(s.current):h.current;if(w)return O(Z,t),C(s.current)}return c.current||O(Z,t),h.current}};return J.cancel=function(){c.current&&(z?cancelAnimationFrame(c.current):clearTimeout(c.current)),i.current=0,u.current=s.current=l.current=c.current=null},J.isPending=function(){return!!c.current},J.flush=function(){return c.current?f(Date.now()):h.current},J},[S,w,t,v,x,z,b,_,r]);return E}function tu(){const{setTime:e,replaceLayers:t,setView:n,mode:r,setMode:o,updateModeFromLocation:s,gibsGeocolor3d:i,toggleGibsGeocolor3d:a,playbackCurrentTimeMs:c}=G(),[u,l]=k.useState({enable3d:!1}),[h,y]=k.useState(!1);k.useEffect(()=>{Zc().then($=>l($)).finally(()=>y(!0))},[]);const g=Bt();let z=new URLSearchParams(location.search).get("mode");!z&&window.location.hash&&(z=new URLSearchParams(window.location.hash.replace(/^#/,"")).get("mode"));const S=z==="3d",x=g&&(h?u.enable3d:!0);k.useEffect(()=>{s()},[s]),k.useEffect(()=>{G.getState().mode==="3d"&&r==="3d"||(S&&!x&&r==="3d"&&o("2d"),S&&x&&r!=="3d"&&o("3d"),!S&&r==="3d"&&!x&&o("2d"))},[S,x,r,o]),k.useEffect(()=>{const $=new URLSearchParams(location.search);r==="3d"&&x?$.set("mode","3d"):$.delete("mode");const T=`${location.pathname}?${$.toString()}${location.hash}`.replace(/\?$/,"");window.history.replaceState({},"",T)},[r,x]),k.useEffect(()=>{if(location.hash){const $=On(location.hash);if($.t&&e($.t),$.lat!=null&&$.lon!=null&&n({lat:$.lat,lon:$.lon}),$.z!=null&&n({zoom:$.z}),$.l){const T="http://localhost:4000/tiles",F=Xc($.l).map(K=>K.id==="gibs-geocolor"?{id:K.id,templateRaw:`${T}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=GOES-East_ABI_GeoColor&format=jpg&time={time}&z={z}&x={x}&y={y}`,opacity:K.opacity}:{id:K.id,templateRaw:`${T}/wmts?base=https%3A%2F%2Fgibs.earthdata.nasa.gov%2Fwmts&layer=${encodeURIComponent(K.id)}&time={time}&z={z}&x={x}&y={y}`,opacity:K.opacity});t(F)}}},[]);const[w,_]=k.useState(null),[v,E]=k.useState(null),C=Kn.useMemo(()=>v?(Array.isArray(v)?v:Array.isArray(v.layers)?v.layers:[]).map(T=>({slug:T.slug,category:T.category??"General",suggested_label:T.suggested_label??T.name??T.slug,source_type:T.type??"raster",tile_url_template:T.template,api_endpoint:T.url,time_format:void 0,attribution:T.attribution,notes:T.notes})):null,[v]);k.useEffect(()=>{fetch("/catalog.json").then(async $=>{try{const T=await $.json();try{return br(T)}catch(F){return console.warn("Catalog validation failed",F),T}}catch{return null}}).then(E).catch(()=>{})},[]);const{playbackBaseStartMs:O,playbackHoursSpan:R,playbackCurrentTimeMs:f,playbackSpeed:Z,setPlaybackCurrentTimeMs:A,setPlaybackSpeed:J}=G(),[L,M]=k.useState(!1),[le,wt]=k.useState(""),[Vt,_t]=k.useState([]),[Ht,Yt]=k.useState(!1);let zt=globalThis.__TILE_PROXY_WARNED__||!1;const kt="http://localhost:4000/tiles";k.useEffect(()=>{!zt&&kt.includes("localhost")&&(globalThis.__TILE_PROXY_WARNED__=!0,zt=!0,Lr.show({color:"yellow",title:"Using default tile proxy",message:`Falling back to ${kt}. Set VITE_TILE_BASE in web/.env.local to remove this message.`}))},[kt,zt]);const[Jt,Zr]=k.useState(null);k.useEffect(()=>{if(!le){_t([]);return}const $=setTimeout(()=>{Yt(!0),fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(le)}`).then(T=>T.json()).then(T=>{_t(T||[])}).catch(()=>_t([])).finally(()=>Yt(!1))},300);return()=>clearTimeout($)},[le]);const Or=$=>{if(!Jt)return;const T=parseFloat($.lat),F=parseFloat($.lon);Number.isFinite(T)&&Number.isFinite(F)&&Jt.flyTo({center:[F,T],zoom:8})},Mr=eu(()=>{const T=new Date(c).toISOString().slice(0,16).replace(/[-:T]/g,"").toLowerCase(),F=On(location.hash);F.t=T;const K=[];F.t&&K.push(`t=${F.t}`),F.lat!=null&&F.lon!=null&&K.push(`lat=${F.lat}&lon=${F.lon}`),F.z!=null&&K.push(`z=${F.z}`),F.l&&K.push(`l=${F.l}`);const Je=K.length?`#${K.join("&")}`:"";Je!==location.hash&&history.replaceState({},"",`${location.pathname}${location.search}${Je}`)},400);return k.useEffect(()=>{Mr()},[c]),m.jsxs(Et,{header:{height:0},navbar:{width:360,breakpoint:"sm",collapsed:{mobile:!1}},padding:0,children:[m.jsx(Et.Navbar,{p:"xs",children:m.jsx(Ur,{style:{height:"100%"},children:m.jsx(Wc,{onSelect:_,activeLayerSlug:w})})}),m.jsxs(Et.Main,{style:{position:"relative"},children:[r==="2d"&&m.jsx(m.Fragment,{children:m.jsx(Hc,{activeLayerSlug:w,catalog:C,onMapReady:Zr,currentTime:f})}),r==="3d"&&x&&m.jsx(Cc,{}),m.jsx(Sc,{mode:r,setMode:o,canUse3D:x}),r==="3d"&&x&&m.jsx(ke,{withBorder:!0,shadow:"sm",p:"xs",style:{position:"absolute",top:70,right:8,zIndex:20},children:m.jsx(ct,{size:"xs",label:"GIBS GeoColor",checked:i,onChange:()=>a()})}),m.jsx(ke,{withBorder:!0,shadow:"sm",p:"xs",style:{position:"absolute",left:8,top:8,zIndex:15},children:m.jsxs(se,{gap:6,align:"center",children:[m.jsx(ee,{size:"xs",c:"dimmed",children:"Catalog Demo"}),m.jsx(ut,{size:"xs",variant:"light",color:"storm",children:"Mantine"})]})}),m.jsxs(ke,{withBorder:!0,shadow:"sm",p:"xs",style:{position:"absolute",top:8,left:"50%",transform:"translateX(-50%)",zIndex:20,width:"min(480px,80%)"},children:[m.jsx(Nr,{placeholder:"Search location…",leftSection:m.jsx(go,{size:16}),value:le,onChange:$=>wt($.currentTarget.value),size:"xs"}),Ht&&m.jsxs(se,{gap:4,mt:4,children:[m.jsx(qr,{size:"xs"}),m.jsx(ee,{size:"xs",c:"dimmed",children:"Searching…"})]}),!Ht&&Vt.length>0&&m.jsx(ke,{withBorder:!0,mt:6,p:4,radius:"sm",style:{maxHeight:220,overflowY:"auto"},children:Vt.slice(0,8).map($=>m.jsx(ee,{size:"xs",style:{cursor:"pointer"},onClick:()=>Or($),title:$.display_name,children:$.display_name},$.place_id))})]}),m.jsx(Jc,{playing:L,togglePlay:()=>M($=>!$),baseStart:O,hoursSpan:R,currentTime:f,setCurrentTime:$=>{A(((F,K)=>typeof F=="function"?F(K):F)($,f))},currentDate:new Date(f),setCurrentDate:$=>{const F=new Date($.getTime());F.setUTCHours(0,0,0,0);const K=Math.round((f-O)/36e5)%R,Je=F.getTime()+K*36e5;A(Je)},hourValue:Math.round((f-O)/36e5),setHourValue:$=>A(O+$*36e5),speed:Z,setSpeed:$=>{$&&J($)}})]})]})}var vt=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.add(e),this.onSubscribe(),()=>{this.listeners.delete(e),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},bt=typeof window>"u"||"Deno"in globalThis;function ne(){}function nu(e,t){return typeof e=="function"?e(t):e}function ru(e){return typeof e=="number"&&e>=0&&e!==1/0}function ou(e,t){return Math.max(e+(t||0)-Date.now(),0)}function At(e,t){return typeof e=="function"?e(t):e}function su(e,t){return typeof e=="function"?e(t):e}function Mn(e,t){const{type:n="all",exact:r,fetchStatus:o,predicate:s,queryKey:i,stale:a}=e;if(i){if(r){if(t.queryHash!==Qt(i,t.options))return!1}else if(!Ke(t.queryKey,i))return!1}if(n!=="all"){const c=t.isActive();if(n==="active"&&!c||n==="inactive"&&c)return!1}return!(typeof a=="boolean"&&t.isStale()!==a||o&&o!==t.state.fetchStatus||s&&!s(t))}function In(e,t){const{exact:n,status:r,predicate:o,mutationKey:s}=e;if(s){if(!t.options.mutationKey)return!1;if(n){if(We(t.options.mutationKey)!==We(s))return!1}else if(!Ke(t.options.mutationKey,s))return!1}return!(r&&t.state.status!==r||o&&!o(t))}function Qt(e,t){return((t==null?void 0:t.queryKeyHashFn)||We)(e)}function We(e){return JSON.stringify(e,(t,n)=>Tt(n)?Object.keys(n).sort().reduce((r,o)=>(r[o]=n[o],r),{}):n)}function Ke(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?Object.keys(t).every(n=>Ke(e[n],t[n])):!1}function kr(e,t){if(e===t)return e;const n=An(e)&&An(t);if(n||Tt(e)&&Tt(t)){const r=n?e:Object.keys(e),o=r.length,s=n?t:Object.keys(t),i=s.length,a=n?[]:{},c=new Set(r);let u=0;for(let l=0;l<i;l++){const h=n?l:s[l];(!n&&c.has(h)||n)&&e[h]===void 0&&t[h]===void 0?(a[h]=void 0,u++):(a[h]=kr(e[h],t[h]),a[h]===e[h]&&e[h]!==void 0&&u++)}return o===i&&u===o?e:a}return t}function An(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function Tt(e){if(!Tn(e))return!1;const t=e.constructor;if(t===void 0)return!0;const n=t.prototype;return!(!Tn(n)||!n.hasOwnProperty("isPrototypeOf")||Object.getPrototypeOf(e)!==Object.prototype)}function Tn(e){return Object.prototype.toString.call(e)==="[object Object]"}function iu(e){return new Promise(t=>{setTimeout(t,e)})}function au(e,t,n){return typeof n.structuralSharing=="function"?n.structuralSharing(e,t):n.structuralSharing!==!1?kr(e,t):t}function cu(e,t,n=0){const r=[...e,t];return n&&r.length>n?r.slice(1):r}function uu(e,t,n=0){const r=[t,...e];return n&&r.length>n?r.slice(0,-1):r}var Wt=Symbol();function xr(e,t){return!e.queryFn&&(t!=null&&t.initialPromise)?()=>t.initialPromise:!e.queryFn||e.queryFn===Wt?()=>Promise.reject(new Error(`Missing queryFn: '${e.queryHash}'`)):e.queryFn}var Se,pe,Ie,Ln,lu=(Ln=class extends vt{constructor(){super();I(this,Se);I(this,pe);I(this,Ie);j(this,Ie,t=>{if(!bt&&window.addEventListener){const n=()=>t();return window.addEventListener("visibilitychange",n,!1),()=>{window.removeEventListener("visibilitychange",n)}}})}onSubscribe(){d(this,pe)||this.setEventListener(d(this,Ie))}onUnsubscribe(){var t;this.hasListeners()||((t=d(this,pe))==null||t.call(this),j(this,pe,void 0))}setEventListener(t){var n;j(this,Ie,t),(n=d(this,pe))==null||n.call(this),j(this,pe,t(r=>{typeof r=="boolean"?this.setFocused(r):this.onFocus()}))}setFocused(t){d(this,Se)!==t&&(j(this,Se,t),this.onFocus())}onFocus(){const t=this.isFocused();this.listeners.forEach(n=>{n(t)})}isFocused(){var t;return typeof d(this,Se)=="boolean"?d(this,Se):((t=globalThis.document)==null?void 0:t.visibilityState)!=="hidden"}},Se=new WeakMap,pe=new WeakMap,Ie=new WeakMap,Ln),Sr=new lu,Ae,me,Te,Un,du=(Un=class extends vt{constructor(){super();I(this,Ae,!0);I(this,me);I(this,Te);j(this,Te,t=>{if(!bt&&window.addEventListener){const n=()=>t(!0),r=()=>t(!1);return window.addEventListener("online",n,!1),window.addEventListener("offline",r,!1),()=>{window.removeEventListener("online",n),window.removeEventListener("offline",r)}}})}onSubscribe(){d(this,me)||this.setEventListener(d(this,Te))}onUnsubscribe(){var t;this.hasListeners()||((t=d(this,me))==null||t.call(this),j(this,me,void 0))}setEventListener(t){var n;j(this,Te,t),(n=d(this,me))==null||n.call(this),j(this,me,t(this.setOnline.bind(this)))}setOnline(t){d(this,Ae)!==t&&(j(this,Ae,t),this.listeners.forEach(r=>{r(t)}))}isOnline(){return d(this,Ae)}},Ae=new WeakMap,me=new WeakMap,Te=new WeakMap,Un),ft=new du;function hu(){let e,t;const n=new Promise((o,s)=>{e=o,t=s});n.status="pending",n.catch(()=>{});function r(o){Object.assign(n,o),delete n.resolve,delete n.reject}return n.resolve=o=>{r({status:"fulfilled",value:o}),e(o)},n.reject=o=>{r({status:"rejected",reason:o}),t(o)},n}function fu(e){return Math.min(1e3*2**e,3e4)}function Er(e){return(e??"online")==="online"?ft.isOnline():!0}var Pr=class extends Error{constructor(e){super("CancelledError"),this.revert=e==null?void 0:e.revert,this.silent=e==null?void 0:e.silent}};function $r(e){let t=!1,n=0,r;const o=hu(),s=()=>o.status!=="pending",i=z=>{var S;s()||(y(new Pr(z)),(S=e.abort)==null||S.call(e))},a=()=>{t=!0},c=()=>{t=!1},u=()=>Sr.isFocused()&&(e.networkMode==="always"||ft.isOnline())&&e.canRun(),l=()=>Er(e.networkMode)&&e.canRun(),h=z=>{s()||(r==null||r(),o.resolve(z))},y=z=>{s()||(r==null||r(),o.reject(z))},g=()=>new Promise(z=>{var S;r=x=>{(s()||u())&&z(x)},(S=e.onPause)==null||S.call(e)}).then(()=>{var z;r=void 0,s()||(z=e.onContinue)==null||z.call(e)}),b=()=>{if(s())return;let z;const S=n===0?e.initialPromise:void 0;try{z=S??e.fn()}catch(x){z=Promise.reject(x)}Promise.resolve(z).then(h).catch(x=>{var C;if(s())return;const w=e.retry??(bt?0:3),_=e.retryDelay??fu,v=typeof _=="function"?_(n,x):_,E=w===!0||typeof w=="number"&&n<w||typeof w=="function"&&w(n,x);if(t||!E){y(x);return}n++,(C=e.onFail)==null||C.call(e,n,x),iu(v).then(()=>u()?void 0:g()).then(()=>{t?y(x):b()})})};return{promise:o,status:()=>o.status,cancel:i,continue:()=>(r==null||r(),o),cancelRetry:a,continueRetry:c,canStart:l,start:()=>(l()?b():g().then(b),o)}}var pu=e=>setTimeout(e,0);function mu(){let e=[],t=0,n=a=>{a()},r=a=>{a()},o=pu;const s=a=>{t?e.push(a):o(()=>{n(a)})},i=()=>{const a=e;e=[],a.length&&o(()=>{r(()=>{a.forEach(c=>{n(c)})})})};return{batch:a=>{let c;t++;try{c=a()}finally{t--,t||i()}return c},batchCalls:a=>(...c)=>{s(()=>{a(...c)})},schedule:s,setNotifyFunction:a=>{n=a},setBatchNotifyFunction:a=>{r=a},setScheduler:a=>{o=a}}}var Y=mu(),Ee,Nn,jr=(Nn=class{constructor(){I(this,Ee)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),ru(this.gcTime)&&j(this,Ee,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(e){this.gcTime=Math.max(this.gcTime||0,e??(bt?1/0:300*1e3))}clearGcTimeout(){d(this,Ee)&&(clearTimeout(d(this,Ee)),j(this,Ee,void 0))}},Ee=new WeakMap,Nn),De,Re,X,Pe,W,Ve,$e,re,de,qn,gu=(qn=class extends jr{constructor(t){super();I(this,re);I(this,De);I(this,Re);I(this,X);I(this,Pe);I(this,W);I(this,Ve);I(this,$e);j(this,$e,!1),j(this,Ve,t.defaultOptions),this.setOptions(t.options),this.observers=[],j(this,Pe,t.client),j(this,X,d(this,Pe).getQueryCache()),this.queryKey=t.queryKey,this.queryHash=t.queryHash,j(this,De,vu(this.options)),this.state=t.state??d(this,De),this.scheduleGc()}get meta(){return this.options.meta}get promise(){var t;return(t=d(this,W))==null?void 0:t.promise}setOptions(t){this.options={...d(this,Ve),...t},this.updateGcTime(this.options.gcTime)}optionalRemove(){!this.observers.length&&this.state.fetchStatus==="idle"&&d(this,X).remove(this)}setData(t,n){const r=au(this.state.data,t,this.options);return V(this,re,de).call(this,{data:r,type:"success",dataUpdatedAt:n==null?void 0:n.updatedAt,manual:n==null?void 0:n.manual}),r}setState(t,n){V(this,re,de).call(this,{type:"setState",state:t,setStateOptions:n})}cancel(t){var r,o;const n=(r=d(this,W))==null?void 0:r.promise;return(o=d(this,W))==null||o.cancel(t),n?n.then(ne).catch(ne):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(d(this,De))}isActive(){return this.observers.some(t=>su(t.options.enabled,this)!==!1)}isDisabled(){return this.getObserversCount()>0?!this.isActive():this.options.queryFn===Wt||this.state.dataUpdateCount+this.state.errorUpdateCount===0}isStatic(){return this.getObserversCount()>0?this.observers.some(t=>At(t.options.staleTime,this)==="static"):!1}isStale(){return this.getObserversCount()>0?this.observers.some(t=>t.getCurrentResult().isStale):this.state.data===void 0||this.state.isInvalidated}isStaleByTime(t=0){return this.state.data===void 0?!0:t==="static"?!1:this.state.isInvalidated?!0:!ou(this.state.dataUpdatedAt,t)}onFocus(){var n;const t=this.observers.find(r=>r.shouldFetchOnWindowFocus());t==null||t.refetch({cancelRefetch:!1}),(n=d(this,W))==null||n.continue()}onOnline(){var n;const t=this.observers.find(r=>r.shouldFetchOnReconnect());t==null||t.refetch({cancelRefetch:!1}),(n=d(this,W))==null||n.continue()}addObserver(t){this.observers.includes(t)||(this.observers.push(t),this.clearGcTimeout(),d(this,X).notify({type:"observerAdded",query:this,observer:t}))}removeObserver(t){this.observers.includes(t)&&(this.observers=this.observers.filter(n=>n!==t),this.observers.length||(d(this,W)&&(d(this,$e)?d(this,W).cancel({revert:!0}):d(this,W).cancelRetry()),this.scheduleGc()),d(this,X).notify({type:"observerRemoved",query:this,observer:t}))}getObserversCount(){return this.observers.length}invalidate(){this.state.isInvalidated||V(this,re,de).call(this,{type:"invalidate"})}async fetch(t,n){var c,u,l,h,y,g,b,z,S,x,w,_;if(this.state.fetchStatus!=="idle"&&((c=d(this,W))==null?void 0:c.status())!=="rejected"){if(this.state.data!==void 0&&(n!=null&&n.cancelRefetch))this.cancel({silent:!0});else if(d(this,W))return d(this,W).continueRetry(),d(this,W).promise}if(t&&this.setOptions(t),!this.options.queryFn){const v=this.observers.find(E=>E.options.queryFn);v&&this.setOptions(v.options)}const r=new AbortController,o=v=>{Object.defineProperty(v,"signal",{enumerable:!0,get:()=>(j(this,$e,!0),r.signal)})},s=()=>{const v=xr(this.options,n),C=(()=>{const O={client:d(this,Pe),queryKey:this.queryKey,meta:this.meta};return o(O),O})();return j(this,$e,!1),this.options.persister?this.options.persister(v,C,this):v(C)},a=(()=>{const v={fetchOptions:n,options:this.options,queryKey:this.queryKey,client:d(this,Pe),state:this.state,fetchFn:s};return o(v),v})();(u=this.options.behavior)==null||u.onFetch(a,this),j(this,Re,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((l=a.fetchOptions)==null?void 0:l.meta))&&V(this,re,de).call(this,{type:"fetch",meta:(h=a.fetchOptions)==null?void 0:h.meta}),j(this,W,$r({initialPromise:n==null?void 0:n.initialPromise,fn:a.fetchFn,abort:r.abort.bind(r),onFail:(v,E)=>{V(this,re,de).call(this,{type:"failed",failureCount:v,error:E})},onPause:()=>{V(this,re,de).call(this,{type:"pause"})},onContinue:()=>{V(this,re,de).call(this,{type:"continue"})},retry:a.options.retry,retryDelay:a.options.retryDelay,networkMode:a.options.networkMode,canRun:()=>!0}));try{const v=await d(this,W).start();if(v===void 0)throw new Error(`${this.queryHash} data is undefined`);return this.setData(v),(g=(y=d(this,X).config).onSuccess)==null||g.call(y,v,this),(z=(b=d(this,X).config).onSettled)==null||z.call(b,v,this.state.error,this),v}catch(v){if(v instanceof Pr){if(v.silent)return d(this,W).promise;if(v.revert){if(this.setState({...d(this,Re),fetchStatus:"idle"}),this.state.data===void 0)throw v;return this.state.data}}throw V(this,re,de).call(this,{type:"error",error:v}),(x=(S=d(this,X).config).onError)==null||x.call(S,v,this),(_=(w=d(this,X).config).onSettled)==null||_.call(w,this.state.data,v,this),v}finally{this.scheduleGc()}}},De=new WeakMap,Re=new WeakMap,X=new WeakMap,Pe=new WeakMap,W=new WeakMap,Ve=new WeakMap,$e=new WeakMap,re=new WeakSet,de=function(t){const n=r=>{switch(t.type){case"failed":return{...r,fetchFailureCount:t.failureCount,fetchFailureReason:t.error};case"pause":return{...r,fetchStatus:"paused"};case"continue":return{...r,fetchStatus:"fetching"};case"fetch":return{...r,...yu(r.data,this.options),fetchMeta:t.meta??null};case"success":const o={...r,data:t.data,dataUpdateCount:r.dataUpdateCount+1,dataUpdatedAt:t.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!t.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};return j(this,Re,t.manual?o:void 0),o;case"error":const s=t.error;return{...r,error:s,errorUpdateCount:r.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:r.fetchFailureCount+1,fetchFailureReason:s,fetchStatus:"idle",status:"error"};case"invalidate":return{...r,isInvalidated:!0};case"setState":return{...r,...t.state}}};this.state=n(this.state),Y.batch(()=>{this.observers.forEach(r=>{r.onQueryUpdate()}),d(this,X).notify({query:this,type:"updated",action:t})})},qn);function yu(e,t){return{fetchFailureCount:0,fetchFailureReason:null,fetchStatus:Er(t.networkMode)?"fetching":"paused",...e===void 0&&{error:null,status:"pending"}}}function vu(e){const t=typeof e.initialData=="function"?e.initialData():e.initialData,n=t!==void 0,r=n?typeof e.initialDataUpdatedAt=="function"?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0;return{data:t,dataUpdateCount:0,dataUpdatedAt:n?r??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:n?"success":"pending",fetchStatus:"idle"}}var ie,Gn,bu=(Gn=class extends vt{constructor(t={}){super();I(this,ie);this.config=t,j(this,ie,new Map)}build(t,n,r){const o=n.queryKey,s=n.queryHash??Qt(o,n);let i=this.get(s);return i||(i=new gu({client:t,queryKey:o,queryHash:s,options:t.defaultQueryOptions(n),state:r,defaultOptions:t.getQueryDefaults(o)}),this.add(i)),i}add(t){d(this,ie).has(t.queryHash)||(d(this,ie).set(t.queryHash,t),this.notify({type:"added",query:t}))}remove(t){const n=d(this,ie).get(t.queryHash);n&&(t.destroy(),n===t&&d(this,ie).delete(t.queryHash),this.notify({type:"removed",query:t}))}clear(){Y.batch(()=>{this.getAll().forEach(t=>{this.remove(t)})})}get(t){return d(this,ie).get(t)}getAll(){return[...d(this,ie).values()]}find(t){const n={exact:!0,...t};return this.getAll().find(r=>Mn(n,r))}findAll(t={}){const n=this.getAll();return Object.keys(t).length>0?n.filter(r=>Mn(t,r)):n}notify(t){Y.batch(()=>{this.listeners.forEach(n=>{n(t)})})}onFocus(){Y.batch(()=>{this.getAll().forEach(t=>{t.onFocus()})})}onOnline(){Y.batch(()=>{this.getAll().forEach(t=>{t.onOnline()})})}},ie=new WeakMap,Gn),ae,H,je,ce,fe,Bn,wu=(Bn=class extends jr{constructor(t){super();I(this,ce);I(this,ae);I(this,H);I(this,je);this.mutationId=t.mutationId,j(this,H,t.mutationCache),j(this,ae,[]),this.state=t.state||_u(),this.setOptions(t.options),this.scheduleGc()}setOptions(t){this.options=t,this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(t){d(this,ae).includes(t)||(d(this,ae).push(t),this.clearGcTimeout(),d(this,H).notify({type:"observerAdded",mutation:this,observer:t}))}removeObserver(t){j(this,ae,d(this,ae).filter(n=>n!==t)),this.scheduleGc(),d(this,H).notify({type:"observerRemoved",mutation:this,observer:t})}optionalRemove(){d(this,ae).length||(this.state.status==="pending"?this.scheduleGc():d(this,H).remove(this))}continue(){var t;return((t=d(this,je))==null?void 0:t.continue())??this.execute(this.state.variables)}async execute(t){var s,i,a,c,u,l,h,y,g,b,z,S,x,w,_,v,E,C,O,R;const n=()=>{V(this,ce,fe).call(this,{type:"continue"})};j(this,je,$r({fn:()=>this.options.mutationFn?this.options.mutationFn(t):Promise.reject(new Error("No mutationFn found")),onFail:(f,Z)=>{V(this,ce,fe).call(this,{type:"failed",failureCount:f,error:Z})},onPause:()=>{V(this,ce,fe).call(this,{type:"pause"})},onContinue:n,retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode,canRun:()=>d(this,H).canRun(this)}));const r=this.state.status==="pending",o=!d(this,je).canStart();try{if(r)n();else{V(this,ce,fe).call(this,{type:"pending",variables:t,isPaused:o}),await((i=(s=d(this,H).config).onMutate)==null?void 0:i.call(s,t,this));const Z=await((c=(a=this.options).onMutate)==null?void 0:c.call(a,t));Z!==this.state.context&&V(this,ce,fe).call(this,{type:"pending",context:Z,variables:t,isPaused:o})}const f=await d(this,je).start();return await((l=(u=d(this,H).config).onSuccess)==null?void 0:l.call(u,f,t,this.state.context,this)),await((y=(h=this.options).onSuccess)==null?void 0:y.call(h,f,t,this.state.context)),await((b=(g=d(this,H).config).onSettled)==null?void 0:b.call(g,f,null,this.state.variables,this.state.context,this)),await((S=(z=this.options).onSettled)==null?void 0:S.call(z,f,null,t,this.state.context)),V(this,ce,fe).call(this,{type:"success",data:f}),f}catch(f){try{throw await((w=(x=d(this,H).config).onError)==null?void 0:w.call(x,f,t,this.state.context,this)),await((v=(_=this.options).onError)==null?void 0:v.call(_,f,t,this.state.context)),await((C=(E=d(this,H).config).onSettled)==null?void 0:C.call(E,void 0,f,this.state.variables,this.state.context,this)),await((R=(O=this.options).onSettled)==null?void 0:R.call(O,void 0,f,t,this.state.context)),f}finally{V(this,ce,fe).call(this,{type:"error",error:f})}}finally{d(this,H).runNext(this)}}},ae=new WeakMap,H=new WeakMap,je=new WeakMap,ce=new WeakSet,fe=function(t){const n=r=>{switch(t.type){case"failed":return{...r,failureCount:t.failureCount,failureReason:t.error};case"pause":return{...r,isPaused:!0};case"continue":return{...r,isPaused:!1};case"pending":return{...r,context:t.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:t.isPaused,status:"pending",variables:t.variables,submittedAt:Date.now()};case"success":return{...r,data:t.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...r,data:void 0,error:t.error,failureCount:r.failureCount+1,failureReason:t.error,isPaused:!1,status:"error"}}};this.state=n(this.state),Y.batch(()=>{d(this,ae).forEach(r=>{r.onMutationUpdate(t)}),d(this,H).notify({mutation:this,type:"updated",action:t})})},Bn);function _u(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var he,oe,He,Qn,zu=(Qn=class extends vt{constructor(t={}){super();I(this,he);I(this,oe);I(this,He);this.config=t,j(this,he,new Set),j(this,oe,new Map),j(this,He,0)}build(t,n,r){const o=new wu({mutationCache:this,mutationId:++Xe(this,He)._,options:t.defaultMutationOptions(n),state:r});return this.add(o),o}add(t){d(this,he).add(t);const n=at(t);if(typeof n=="string"){const r=d(this,oe).get(n);r?r.push(t):d(this,oe).set(n,[t])}this.notify({type:"added",mutation:t})}remove(t){if(d(this,he).delete(t)){const n=at(t);if(typeof n=="string"){const r=d(this,oe).get(n);if(r)if(r.length>1){const o=r.indexOf(t);o!==-1&&r.splice(o,1)}else r[0]===t&&d(this,oe).delete(n)}}this.notify({type:"removed",mutation:t})}canRun(t){const n=at(t);if(typeof n=="string"){const r=d(this,oe).get(n),o=r==null?void 0:r.find(s=>s.state.status==="pending");return!o||o===t}else return!0}runNext(t){var r;const n=at(t);if(typeof n=="string"){const o=(r=d(this,oe).get(n))==null?void 0:r.find(s=>s!==t&&s.state.isPaused);return(o==null?void 0:o.continue())??Promise.resolve()}else return Promise.resolve()}clear(){Y.batch(()=>{d(this,he).forEach(t=>{this.notify({type:"removed",mutation:t})}),d(this,he).clear(),d(this,oe).clear()})}getAll(){return Array.from(d(this,he))}find(t){const n={exact:!0,...t};return this.getAll().find(r=>In(n,r))}findAll(t={}){return this.getAll().filter(n=>In(t,n))}notify(t){Y.batch(()=>{this.listeners.forEach(n=>{n(t)})})}resumePausedMutations(){const t=this.getAll().filter(n=>n.state.isPaused);return Y.batch(()=>Promise.all(t.map(n=>n.continue().catch(ne))))}},he=new WeakMap,oe=new WeakMap,He=new WeakMap,Qn);function at(e){var t;return(t=e.options.scope)==null?void 0:t.id}function Dn(e){return{onFetch:(t,n)=>{var l,h,y,g,b;const r=t.options,o=(y=(h=(l=t.fetchOptions)==null?void 0:l.meta)==null?void 0:h.fetchMore)==null?void 0:y.direction,s=((g=t.state.data)==null?void 0:g.pages)||[],i=((b=t.state.data)==null?void 0:b.pageParams)||[];let a={pages:[],pageParams:[]},c=0;const u=async()=>{let z=!1;const S=_=>{Object.defineProperty(_,"signal",{enumerable:!0,get:()=>(t.signal.aborted?z=!0:t.signal.addEventListener("abort",()=>{z=!0}),t.signal)})},x=xr(t.options,t.fetchOptions),w=async(_,v,E)=>{if(z)return Promise.reject();if(v==null&&_.pages.length)return Promise.resolve(_);const O=(()=>{const A={client:t.client,queryKey:t.queryKey,pageParam:v,direction:E?"backward":"forward",meta:t.options.meta};return S(A),A})(),R=await x(O),{maxPages:f}=t.options,Z=E?uu:cu;return{pages:Z(_.pages,R,f),pageParams:Z(_.pageParams,v,f)}};if(o&&s.length){const _=o==="backward",v=_?ku:Rn,E={pages:s,pageParams:i},C=v(r,E);a=await w(E,C,_)}else{const _=e??s.length;do{const v=c===0?i[0]??r.initialPageParam:Rn(r,a);if(c>0&&v==null)break;a=await w(a,v),c++}while(c<_)}return a};t.options.persister?t.fetchFn=()=>{var z,S;return(S=(z=t.options).persister)==null?void 0:S.call(z,u,{client:t.client,queryKey:t.queryKey,meta:t.options.meta,signal:t.signal},n)}:t.fetchFn=u}}}function Rn(e,{pages:t,pageParams:n}){const r=t.length-1;return t.length>0?e.getNextPageParam(t[r],t,n[r],n):void 0}function ku(e,{pages:t,pageParams:n}){var r;return t.length>0?(r=e.getPreviousPageParam)==null?void 0:r.call(e,t[0],t,n[0],n):void 0}var q,ge,ye,Fe,Le,ve,Ue,Ne,Wn,xu=(Wn=class{constructor(e={}){I(this,q);I(this,ge);I(this,ye);I(this,Fe);I(this,Le);I(this,ve);I(this,Ue);I(this,Ne);j(this,q,e.queryCache||new bu),j(this,ge,e.mutationCache||new zu),j(this,ye,e.defaultOptions||{}),j(this,Fe,new Map),j(this,Le,new Map),j(this,ve,0)}mount(){Xe(this,ve)._++,d(this,ve)===1&&(j(this,Ue,Sr.subscribe(async e=>{e&&(await this.resumePausedMutations(),d(this,q).onFocus())})),j(this,Ne,ft.subscribe(async e=>{e&&(await this.resumePausedMutations(),d(this,q).onOnline())})))}unmount(){var e,t;Xe(this,ve)._--,d(this,ve)===0&&((e=d(this,Ue))==null||e.call(this),j(this,Ue,void 0),(t=d(this,Ne))==null||t.call(this),j(this,Ne,void 0))}isFetching(e){return d(this,q).findAll({...e,fetchStatus:"fetching"}).length}isMutating(e){return d(this,ge).findAll({...e,status:"pending"}).length}getQueryData(e){var n;const t=this.defaultQueryOptions({queryKey:e});return(n=d(this,q).get(t.queryHash))==null?void 0:n.state.data}ensureQueryData(e){const t=this.defaultQueryOptions(e),n=d(this,q).build(this,t),r=n.state.data;return r===void 0?this.fetchQuery(e):(e.revalidateIfStale&&n.isStaleByTime(At(t.staleTime,n))&&this.prefetchQuery(t),Promise.resolve(r))}getQueriesData(e){return d(this,q).findAll(e).map(({queryKey:t,state:n})=>{const r=n.data;return[t,r]})}setQueryData(e,t,n){const r=this.defaultQueryOptions({queryKey:e}),o=d(this,q).get(r.queryHash),s=o==null?void 0:o.state.data,i=nu(t,s);if(i!==void 0)return d(this,q).build(this,r).setData(i,{...n,manual:!0})}setQueriesData(e,t,n){return Y.batch(()=>d(this,q).findAll(e).map(({queryKey:r})=>[r,this.setQueryData(r,t,n)]))}getQueryState(e){var n;const t=this.defaultQueryOptions({queryKey:e});return(n=d(this,q).get(t.queryHash))==null?void 0:n.state}removeQueries(e){const t=d(this,q);Y.batch(()=>{t.findAll(e).forEach(n=>{t.remove(n)})})}resetQueries(e,t){const n=d(this,q);return Y.batch(()=>(n.findAll(e).forEach(r=>{r.reset()}),this.refetchQueries({type:"active",...e},t)))}cancelQueries(e,t={}){const n={revert:!0,...t},r=Y.batch(()=>d(this,q).findAll(e).map(o=>o.cancel(n)));return Promise.all(r).then(ne).catch(ne)}invalidateQueries(e,t={}){return Y.batch(()=>(d(this,q).findAll(e).forEach(n=>{n.invalidate()}),(e==null?void 0:e.refetchType)==="none"?Promise.resolve():this.refetchQueries({...e,type:(e==null?void 0:e.refetchType)??(e==null?void 0:e.type)??"active"},t)))}refetchQueries(e,t={}){const n={...t,cancelRefetch:t.cancelRefetch??!0},r=Y.batch(()=>d(this,q).findAll(e).filter(o=>!o.isDisabled()&&!o.isStatic()).map(o=>{let s=o.fetch(void 0,n);return n.throwOnError||(s=s.catch(ne)),o.state.fetchStatus==="paused"?Promise.resolve():s}));return Promise.all(r).then(ne)}fetchQuery(e){const t=this.defaultQueryOptions(e);t.retry===void 0&&(t.retry=!1);const n=d(this,q).build(this,t);return n.isStaleByTime(At(t.staleTime,n))?n.fetch(t):Promise.resolve(n.state.data)}prefetchQuery(e){return this.fetchQuery(e).then(ne).catch(ne)}fetchInfiniteQuery(e){return e.behavior=Dn(e.pages),this.fetchQuery(e)}prefetchInfiniteQuery(e){return this.fetchInfiniteQuery(e).then(ne).catch(ne)}ensureInfiniteQueryData(e){return e.behavior=Dn(e.pages),this.ensureQueryData(e)}resumePausedMutations(){return ft.isOnline()?d(this,ge).resumePausedMutations():Promise.resolve()}getQueryCache(){return d(this,q)}getMutationCache(){return d(this,ge)}getDefaultOptions(){return d(this,ye)}setDefaultOptions(e){j(this,ye,e)}setQueryDefaults(e,t){d(this,Fe).set(We(e),{queryKey:e,defaultOptions:t})}getQueryDefaults(e){const t=[...d(this,Fe).values()],n={};return t.forEach(r=>{Ke(e,r.queryKey)&&Object.assign(n,r.defaultOptions)}),n}setMutationDefaults(e,t){d(this,Le).set(We(e),{mutationKey:e,defaultOptions:t})}getMutationDefaults(e){const t=[...d(this,Le).values()],n={};return t.forEach(r=>{Ke(e,r.mutationKey)&&Object.assign(n,r.defaultOptions)}),n}defaultQueryOptions(e){if(e._defaulted)return e;const t={...d(this,ye).queries,...this.getQueryDefaults(e.queryKey),...e,_defaulted:!0};return t.queryHash||(t.queryHash=Qt(t.queryKey,t)),t.refetchOnReconnect===void 0&&(t.refetchOnReconnect=t.networkMode!=="always"),t.throwOnError===void 0&&(t.throwOnError=!!t.suspense),!t.networkMode&&t.persister&&(t.networkMode="offlineFirst"),t.queryFn===Wt&&(t.enabled=!1),t}defaultMutationOptions(e){return e!=null&&e._defaulted?e:{...d(this,ye).mutations,...(e==null?void 0:e.mutationKey)&&this.getMutationDefaults(e.mutationKey),...e,_defaulted:!0}}clear(){d(this,q).clear(),d(this,ge).clear()}},q=new WeakMap,ge=new WeakMap,ye=new WeakMap,Fe=new WeakMap,Le=new WeakMap,ve=new WeakMap,Ue=new WeakMap,Ne=new WeakMap,Wn),Su=k.createContext(void 0),Eu=({client:e,children:t})=>(k.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]),m.jsx(Su.Provider,{value:e,children:t}));const Kt=k.createContext(null);Kt.displayName="@mantine/modals/ModalsContext";function Pu(){const e=k.useContext(Kt);if(!e)throw new Error("[@mantine/modals] useModals hook was called outside of context, wrap your app with ModalsProvider component");return e}function $u({id:e,cancelProps:t,confirmProps:n,labels:r={cancel:"",confirm:""},closeOnConfirm:o=!0,closeOnCancel:s=!0,groupProps:i,onCancel:a,onConfirm:c,children:u}){const{cancel:l,confirm:h}=r,y=Pu(),g=z=>{typeof(t==null?void 0:t.onClick)=="function"&&(t==null||t.onClick(z)),typeof a=="function"&&a(),s&&y.closeModal(e)},b=z=>{typeof(n==null?void 0:n.onClick)=="function"&&(n==null||n.onClick(z)),typeof c=="function"&&c(),o&&y.closeModal(e)};return m.jsxs(m.Fragment,{children:[u&&m.jsx(Gr,{mb:"md",children:u}),m.jsxs(se,{mt:u?0:"md",justify:"flex-end",...i,children:[m.jsx(ut,{variant:"default",...t,onClick:g,children:(t==null?void 0:t.children)||l}),m.jsx(ut,{...n,onClick:b,children:(n==null?void 0:n.children)||h})]})]})}const[ju,Cr]=Br("mantine-modals");Cr("closeModal");Cr("closeAllModals");function Fn(e,t){var n,r,o,s;t&&e.type==="confirm"&&((r=(n=e.props).onCancel)==null||r.call(n)),(s=(o=e.props).onClose)==null||s.call(o)}function Cu(e,t){var n;switch(t.type){case"OPEN":return{current:t.modal,modals:[...e.modals,t.modal]};case"CLOSE":{const r=e.modals.find(s=>s.id===t.modalId);if(!r)return e;Fn(r,t.canceled);const o=e.modals.filter(s=>s.id!==t.modalId);return{current:o[o.length-1]||e.current,modals:o}}case"CLOSE_ALL":return e.modals.length?(e.modals.concat().reverse().forEach(r=>{Fn(r,t.canceled)}),{current:e.current,modals:[]}):e;case"UPDATE":{const{modalId:r,newProps:o}=t,s=e.modals.map(a=>a.id!==r?a:a.type==="content"||a.type==="confirm"?{...a,props:{...a.props,...o}}:a.type==="context"?{...a,props:{...a.props,...o,innerProps:{...a.props.innerProps,...o.innerProps}}}:a),i=((n=e.current)==null?void 0:n.id)===r&&s.find(a=>a.id===r)||e.current;return{...e,modals:s,current:i}}default:return e}}function Zu(e){if(!e)return{confirmProps:{},modalProps:{}};const{id:t,children:n,onCancel:r,onConfirm:o,closeOnConfirm:s,closeOnCancel:i,cancelProps:a,confirmProps:c,groupProps:u,labels:l,...h}=e;return{confirmProps:{id:t,children:n,onCancel:r,onConfirm:o,closeOnConfirm:s,closeOnCancel:i,cancelProps:a,confirmProps:c,groupProps:u,labels:l},modalProps:{id:t,...h}}}function Ou({children:e,modalProps:t,labels:n,modals:r}){const[o,s]=k.useReducer(Cu,{modals:[],current:null}),i=k.useRef(o);i.current=o;const a=k.useCallback(w=>{s({type:"CLOSE_ALL",canceled:w})},[i,s]),c=k.useCallback(({modalId:w,..._})=>{const v=w||Pt();return s({type:"OPEN",modal:{id:v,type:"content",props:_}}),v},[s]),u=k.useCallback(({modalId:w,..._})=>{const v=w||Pt();return s({type:"OPEN",modal:{id:v,type:"confirm",props:_}}),v},[s]),l=k.useCallback((w,{modalId:_,...v})=>{const E=_||Pt();return s({type:"OPEN",modal:{id:E,type:"context",props:v,ctx:w}}),E},[s]),h=k.useCallback((w,_)=>{s({type:"CLOSE",modalId:w,canceled:_})},[i,s]),y=k.useCallback(({modalId:w,..._})=>{s({type:"UPDATE",modalId:w,newProps:_})},[s]),g=k.useCallback(({modalId:w,..._})=>{s({type:"UPDATE",modalId:w,newProps:_})},[s]);ju({openModal:c,openConfirmModal:u,openContextModal:({modal:w,..._})=>l(w,_),closeModal:h,closeContextModal:h,closeAllModals:a,updateModal:y,updateContextModal:g});const b={modalProps:t||{},modals:o.modals,openModal:c,openConfirmModal:u,openContextModal:l,closeModal:h,closeContextModal:h,closeAll:a,updateModal:y,updateContextModal:g},z=()=>{const w=i.current.current;switch(w==null?void 0:w.type){case"context":{const{innerProps:_,...v}=w.props,E=r[w.ctx];return{modalProps:v,content:m.jsx(E,{innerProps:_,context:b,id:w.id})}}case"confirm":{const{modalProps:_,confirmProps:v}=Zu(w.props);return{modalProps:_,content:m.jsx($u,{...v,id:w.id,labels:w.props.labels||n})}}case"content":{const{children:_,...v}=w.props;return{modalProps:v,content:_}}default:return{modalProps:{},content:null}}},{modalProps:S,content:x}=z();return m.jsxs(Kt.Provider,{value:b,children:[m.jsx(Qr,{zIndex:Wr("modal")+1,...t,...S,opened:o.modals.length>0,onClose:()=>{var w;return h((w=o.current)==null?void 0:w.id)},children:x}),e]})}const Mu=["#e6f1ff","#cfe1ff","#a0c3ff","#72a4ff","#4b8bff","#2f79ff","#1f6eff","#1b62e6","#1757cf","#1046b0"],Iu=["#f2f6fa","#d9e1ea","#b3c3d5","#8aa2bc","#6a87a8","#577596","#4b698b","#405d7e","#375473","#2a4764"],Au=Kr({primaryColor:"storm",colors:{storm:Mu,panel:Iu},defaultRadius:"md",fontFamily:"Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, Apple Color Emoji, Segoe UI Emoji",headings:{fontWeight:"600"}}),Tu=new xu;eo.createRoot(document.getElementById("root")).render(m.jsx(Vr,{theme:Au,children:m.jsxs(Ou,{children:[m.jsx(Hr,{position:"top-right"}),m.jsx(Eu,{client:Tu,children:m.jsx(tu,{})})]})}));export{$c as _,Uu as a,G as u};
./web/.env.example:4:VITE_GIBS_WMTS_TILE_URL=/api/gibs/geocolor/{TileMatrix}/{TileCol}/{TileRow}.jpg
./AGENTUPDATEHISTORY.jsonl:2:{"id": "9611660c-5bb2-4c06-a1ae-b2c16e2396c5", "timestamp": "2025-08-22T09:15:41Z", "actor": "copilot-agent", "area": "web", "category": "web", "summary": "Wrap app in TanStack Query provider; add demo GIBS GeoColor layer; type catalog fetch.", "rationale": "Enable async data fetching and provide a one-click satellite demo to validate the tile proxy end-to-end.", "vision_alignment_confirmed": true, "relates_to_vision": ["1 Unification of Data Sources", "2 High-Performance Visualization"], "pre_checks": ["lint:pass", "build:pass", "tests:n/a"], "validation": ["manual:demo-layer loads"], "changes": [{"path": "web/src/main.tsx", "action": "modify", "diff_stats": {"added": 25, "removed": 5}}, {"path": "web/src/Panel.tsx", "action": "modify", "diff_stats": {"added": 60, "removed": 22}}, {"path": "web/.env.example", "action": "add", "diff_stats": {"added": 3, "removed": 0}}], "paths": ["web/src/main.tsx", "web/src/Panel.tsx", "web/.env.example"], "commits": [{"sha": "deadbeef1234", "message": "feat(web): add QueryClientProvider + demo GIBS layer"}], "links": {"pr": "none", "issue": "none"}, "post_checks": ["web:dev:ok", "proxy:dev:ok"], "risk": "low", "impact": "Developers can fetch and display live tiles via proxy; UX demo available.", "status": "applied", "change_type": "modify", "cost_impact": "none", "reviewers": [], "follow_ups": ["Catalog: curate real WMTS layer IDs per provider", "Time slider: wire to GIBS time params"], "tags": ["frontend", "satellite", "proxy"]}
./AGENTUPDATEHISTORY.jsonl:26:{"id": "globe-v2-attrib-gibs-20250823", "timestamp": "2025-08-23T15:45:00Z", "actor": "copilot-agent", "area": "web+proxy", "category": "3d", "summary": "3D globe V2: attribution, CartoDB route test, GIBS GeoColor toggle.", "rationale": "Compliance & coverage improvements while enabling first dynamic EO imagery layer in optional 3D mode.", "vision_alignment_confirmed": true, "relates_to_vision": ["2 High-Performance Visualization", "6 Scalable Infrastructure"], "pre_checks": ["build:pass"], "validation": ["tests:pass", "manual:gibs toggle"], "changes": [{"path": "web/src/util/store.ts", "action": "modify"}, {"path": "web/src/map/cesium/CesiumGlobe.tsx", "action": "modify"}, {"path": "web/src/ui/App.tsx", "action": "modify"}, {"path": "services/proxy/src/cartodb.test.ts", "action": "add"}, {"path": "services/proxy/src/routes/gibs.ts", "action": "add"}, {"path": "services/proxy/src/index.ts", "action": "modify"}, {"path": "web/.env.example", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["web/src/util/store.ts", "web/src/map/cesium/CesiumGlobe.tsx", "web/src/ui/App.tsx", "services/proxy/src/cartodb.test.ts", "services/proxy/src/routes/gibs.ts", "services/proxy/src/index.ts", "web/.env.example", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": [], "risk": "low", "impact": "Adds compliance and dynamic imagery without affecting default 2D UX.", "status": "applied", "change_type": "add", "cost_impact": "none", "reviewers": [], "follow_ups": ["Add time param wiring", "Add removal test"], "tags": ["3d", "imagery", "gibs", "attribution", "tests"]}
./AGENTUPDATEHISTORY.jsonl:27:{"id": "gibs-tests-20250823", "timestamp": "2025-08-23T15:55:00Z", "actor": "copilot-agent", "area": "tests", "category": "tests", "summary": "Add Vitest suite for GIBS GeoColor proxy route.", "rationale": "Ensure correctness (status, headers, cache-control, upstream URL, error handling) for new dynamic EO imagery endpoint before expanding capabilities.", "vision_alignment_confirmed": true, "relates_to_vision": ["2 High-Performance Visualization", "6 Scalable Infrastructure"], "pre_checks": ["build:pass"], "validation": ["tests:pass"], "changes": [{"path": "services/proxy/src/__tests__/gibs.test.ts", "action": "add"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["services/proxy/src/__tests__/gibs.test.ts", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": ["tests:pass"], "risk": "low", "impact": "Raises confidence in proxy correctness for dynamic tiles.", "status": "applied", "change_type": "add", "cost_impact": "none", "reviewers": [], "follow_ups": ["Add tests for time enumeration", "Test additional GIBS layers"], "tags": ["gibs", "proxy", "tests", "imagery"]}
./AGENTUPDATEHISTORY.jsonl:28:{"id": "gibs-tests-refactor-20250823", "timestamp": "2025-08-23T15:57:00Z", "actor": "copilot-agent", "area": "services/proxy", "category": "tests", "summary": "Refactor GIBS route to allow injectable fetch for testing.", "rationale": "Enable deterministic mocking since static ESM import of undici fetch resists replacement in tests.", "vision_alignment_confirmed": true, "relates_to_vision": ["6 Scalable Infrastructure"], "pre_checks": ["build:pass"], "validation": ["tests:pass"], "changes": [{"path": "services/proxy/src/routes/gibs.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/gibs.test.ts", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["services/proxy/src/routes/gibs.ts", "services/proxy/src/__tests__/gibs.test.ts", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": ["tests:pass"], "risk": "low", "impact": "Improves testability without affecting runtime behavior.", "status": "applied", "change_type": "refactor", "cost_impact": "none", "reviewers": [], "follow_ups": ["Remove injection if Node global fetch adopted"], "tags": ["tests", "refactor", "gibs"]}
./AGENTUPDATEHISTORY.jsonl:29:{"id": "gibs-dynamic-time-20250823", "timestamp": "2025-08-23T16:10:00Z", "actor": "copilot-agent", "area": "web+proxy", "category": "3d", "summary": "Dynamic time handling for GIBS GeoColor (timestamps endpoint, UI selection, Cesium layer update).", "rationale": "Enable temporal selection of GOES-East GeoColor imagery in gated 3D mode, advancing exploratory analysis capabilities.", "vision_alignment_confirmed": true, "relates_to_vision": ["2 High-Performance Visualization", "6 Scalable Infrastructure"], "pre_checks": ["build:pass"], "validation": ["tests:pass", "manual:dropdown updates layer"], "changes": [{"path": "services/proxy/src/routes/gibs.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/gibsTimestamps.test.ts", "action": "add"}, {"path": "web/src/util/store.ts", "action": "modify"}, {"path": "web/src/components/Panel.tsx", "action": "modify"}, {"path": "web/src/map/cesium/CesiumGlobe.tsx", "action": "modify"}, {"path": "docs/ROADMAP.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["services/proxy/src/routes/gibs.ts", "services/proxy/src/__tests__/gibsTimestamps.test.ts", "web/src/util/store.ts", "web/src/components/Panel.tsx", "web/src/map/cesium/CesiumGlobe.tsx", "docs/ROADMAP.md", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": ["tests:pass"], "risk": "low", "impact": "Introduces temporal exploration without affecting 2D UX.", "status": "applied", "change_type": "add", "cost_impact": "none", "reviewers": [], "follow_ups": ["Add time playback", "Support more GIBS layers"], "tags": ["gibs", "3d", "time", "proxy", "cesium"]}
./AGENTUPDATEHISTORY.jsonl:30:{"id": "globe-v3-playback-firms-owm-20250823", "timestamp": "2025-08-23T16:25:00Z", "actor": "copilot-agent", "area": "web+proxy", "category": "3d", "summary": "3D Globe V3: GIBS playback, generalized capabilities, FIRMS points, OWM temperature overlay.", "rationale": "Enhance exploratory value of 3D globe with temporal animation and core hazard/weather layers while keeping 2D primary.", "vision_alignment_confirmed": true, "relates_to_vision": ["2 High-Performance Visualization", "6 Scalable Infrastructure"], "pre_checks": ["build:pass"], "validation": ["tests:pass", "manual:playback+layer toggles"], "changes": [{"path": "web/src/util/store.ts", "action": "modify"}, {"path": "web/src/components/Panel.tsx", "action": "modify"}, {"path": "web/src/map/cesium/CesiumGlobe.tsx", "action": "modify"}, {"path": "services/proxy/src/routes/gibs.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/gibsUtils.test.ts", "action": "add"}, {"path": "docs/ROADMAP.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["web/src/util/store.ts", "web/src/components/Panel.tsx", "web/src/map/cesium/CesiumGlobe.tsx", "services/proxy/src/routes/gibs.ts", "services/proxy/src/__tests__/gibsUtils.test.ts", "docs/ROADMAP.md", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": ["tests:pass"], "risk": "low", "impact": "Adds temporal animation & hazard/weather overlays to 3D globe.", "status": "applied", "change_type": "add", "cost_impact": "none", "reviewers": [], "follow_ups": ["Improve performance", "Add legends", "Robust XML parser"], "tags": ["3d", "playback", "firms", "owm", "gibs"]}
./AGENTUPDATEHISTORY.jsonl:34:{"id": "gibs-time-animation-merge-20250824", "timestamp": "2025-08-24T21:42:30Z", "actor": "copilot-agent", "area": "proxy+web", "category": "gibs", "summary": "Merge GIBS explicit ?time parameter + web animation playback (timestamps loader, UI controls).", "rationale": "Enable deterministic temporal frame selection and client-side playback over a generic tile endpoint while keeping default 'latest' behavior.", "vision_alignment_confirmed": true, "relates_to_vision": ["1 Unification of Data Sources", "2 High-Performance Visualization"], "pre_checks": ["validate:catalog:pass", "validate:inventory:pass", "tests:proxy+web:pass"], "validation": ["tests:24/24 proxy", "web:tests:pass", "manual:geoColor-latest", "manual:animation"], "changes": [{"path": "services/proxy/src/routes/gibs.ts", "action": "modify"}, {"path": "services/proxy/src/lib/gibs/capabilities.ts", "action": "add"}, {"path": "services/proxy/src/__tests__/gibs.test.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/gibsTimestamps.test.ts", "action": "add"}, {"path": "services/proxy/src/__tests__/gibsUtils.test.ts", "action": "add"}, {"path": "web/src/util/gibs.ts", "action": "add"}, {"path": "web/src/util/gibs.test.ts", "action": "add"}, {"path": "web/src/ui/MapView.tsx", "action": "modify"}, {"path": "web/src/ui/Panel.tsx", "action": "modify"}, {"path": "web/public/catalog.json", "action": "modify"}, {"path": "docs/api.md", "action": "modify"}, {"path": "CHANGELOG.md", "action": "modify"}], "paths": ["services/proxy/src/routes/gibs.ts", "services/proxy/src/lib/gibs/capabilities.ts", "web/src/util/gibs.ts", "web/src/ui/MapView.tsx", "web/src/ui/Panel.tsx", "web/public/catalog.json", "docs/api.md", "CHANGELOG.md"], "commits": [{"sha": "dc84603", "message": "feat(proxy/web/gibs): explicit ?time=ISO on latest-tile route; web animation wiring; tests & docs"}], "links": {"pr": "(squash-merge-direct)"}, "post_checks": ["tests:pass", "catalog:validated"], "risk": "low", "impact": "Adds temporal animation without breaking existing consumers (latest remains default).", "status": "applied", "change_type": "add", "cost_impact": "none", "reviewers": [], "follow_ups": ["Prefetch next frame", "Playback FPS clamp", "Additional GIBS layers"], "tags": ["gibs", "animation", "proxy", "web"]}
./AGENTUPDATEHISTORY.jsonl:35:{"id": "gibs-ops-polish-20250824", "timestamp": "2025-08-24T21:46:10Z", "actor": "copilot-agent", "area": "services/proxy", "category": "observability", "summary": "Add /api/gibs/* token-bucket rate limiting + gibs tile duration & status metrics.", "rationale": "Protect upstream GIBS during rapid playback while exposing latency and status distribution for tuning.", "vision_alignment_confirmed": true, "relates_to_vision": ["2 High-Performance Visualization", "6 Scalable Infrastructure"], "pre_checks": ["tests:baseline:pass"], "validation": ["tests:25/25 proxy", "rate-limit:test"], "changes": [{"path": "services/proxy/src/index.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/gibsOps.test.ts", "action": "add"}], "paths": ["services/proxy/src/index.ts", "services/proxy/src/__tests__/gibsOps.test.ts"], "commits": [{"sha": "72d6292", "message": "chore(proxy/gibs): rate limiting + gibs tile metrics (status & duration) with tests"}], "links": {"pr": "chore/gibs-ops-polish"}, "post_checks": ["tests:pass"], "risk": "low", "impact": "Graceful overload handling and new observability dimensions for GIBS tiles.", "status": "applied", "change_type": "add", "cost_impact": "none", "reviewers": [], "follow_ups": ["Dashboard panels", "Alert on sustained 4xx/5xx"], "tags": ["rate-limit", "metrics", "gibs", "proxy"]}
./AGENTUPDATEHISTORY.jsonl:36:{"id": "nws-goes-400-fix-20250825", "timestamp": "2025-08-25T00:00:00Z", "actor": "copilot-agent", "area": "proxy+catalog", "category": "stability", "summary": "Rewrite NWS alerts to /alerts/active with required headers; use ISO timestamps for GOES layers.", "rationale": "Weather.gov and GIBS returned HTTP 400 when paths or timestamps were incomplete.", "vision_alignment_confirmed": true, "relates_to_vision": ["1 Unification of Data Sources", "2 High-Performance Visualization", "4 Alerting & Notification System"], "pre_checks": [], "validation": ["tests:pass", "format:warn", "health-check:fail"], "changes": [{"path": "services/proxy/src/routes/nws.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/nws.test.ts", "action": "add"}, {"path": "services/proxy/src/routes.test.ts", "action": "modify"}, {"path": "web/public/catalog.json", "action": "modify"}, {"path": "services/web/public/catalog.json", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["services/proxy/src/routes/nws.ts", "services/proxy/src/__tests__/nws.test.ts", "services/proxy/src/routes.test.ts", "web/public/catalog.json", "services/web/public/catalog.json", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": ["tests:pass", "health-check:fail"], "risk": "low", "impact": "Reduces 400s for alerts and GOES tiles", "status": "applied", "change_type": "modify", "cost_impact": "none", "reviewers": [], "follow_ups": ["Add NWS error-body tests", "Investigate upstream 502s"], "tags": ["nws", "gibs", "proxy", "catalog"]}
./AGENTUPDATEHISTORY.jsonl:37:{"id": "gibs-colon-fix-20250826", "timestamp": "2025-08-26T00:00:00Z", "actor": "copilot-agent", "area": "services/proxy", "category": "stability", "summary": "Use encodeURI for GOES/GIBS timestamps so colons remain unescaped; update tests.", "rationale": "encodeURIComponent produced %3A, causing GIBS tile 400 responses.", "vision_alignment_confirmed": true, "relates_to_vision": ["1 Unification of Data Sources", "2 High-Performance Visualization"], "pre_checks": [], "validation": ["tests:pass", "format:check:pass"], "changes": [{"path": "services/proxy/health-check.ts", "action": "modify"}, {"path": "services/proxy/src/lib/gibs/capabilities.ts", "action": "modify"}, {"path": "services/proxy/src/__tests__/gibs.test.ts", "action": "modify"}, {"path": "web/vite.config.ts", "action": "format"}, {"path": "AGENTUPDATEHISTORY.md", "action": "modify"}, {"path": "AGENTUPDATEHISTORY.jsonl", "action": "modify"}], "paths": ["services/proxy/health-check.ts", "services/proxy/src/lib/gibs/capabilities.ts", "services/proxy/src/__tests__/gibs.test.ts", "web/vite.config.ts", "AGENTUPDATEHISTORY.md", "AGENTUPDATEHISTORY.jsonl"], "commits": [], "links": {"pr": "none"}, "post_checks": ["tests:pass", "format:check:pass"], "risk": "low", "impact": "Stops GIBS 400s due to encoded timestamps.", "status": "applied", "change_type": "modify", "cost_impact": "none", "reviewers": [], "follow_ups": ["None"], "tags": ["gibs", "proxy", "tests"]}
./AGENTUPDATEHISTORY.jsonl:38:{"id":"goes-proxy-prefetch-20250826","timestamp":"2025-08-26T00:00:00Z","actor":"copilot-agent","area":"web+catalog","category":"gibs","summary":"Proxy GOES tiles and prefetch fix","rationale":"Ensure GOES layers use proxy-resolved latest timestamps and remove misleading date formats.","relates_to_vision":["1 Unification of Data Sources","2 High-Performance Visualization"],"pre_checks":[],"validation":["eslint:pass","format:check:pass","tests:pass","web:build:pass","curl:tile:500"],"changes":[{"path":"web/src/util/gibs.ts","action":"modify"},{"path":"web/public/catalog.json","action":"modify"},{"path":"scripts/update-goes-catalog.js","action":"add"},{"path":"AGENTUPDATEHISTORY.md","action":"modify"},{"path":"AGENTUPDATEHISTORY.jsonl","action":"modify"}],"paths":["web/src/util/gibs.ts","web/public/catalog.json","scripts/update-goes-catalog.js","AGENTUPDATEHISTORY.md","AGENTUPDATEHISTORY.jsonl"],"pr_number":"none","status":"applied","change_type":"modify","cost_impact":"none","reviewers":[]}
./scripts/update-goes-catalog.js:10:  if (slug && slug.startsWith('GOES-')) {
./scripts/update-goes-catalog.js:21:console.log(`Updated ${updated} GOES entries`);
./scripts/wmts_pick.js:2:// wmts_pick.js - Extract GOES/GIBS TileMatrixSet info from NASA WMTS GetCapabilities
./scripts/wmts_pick.js:7:  'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi?SERVICE=WMTS&REQUEST=GetCapabilities';
./scripts/wmts_pick.js:41:              const m = /GoogleMapsCompatible_Level(\d+)/.exec(s);
./scripts/wmts_pick.js:62:      // Show GOES layers specifically
./scripts/wmts_pick.js:63:      const goesLayers = summaries.filter((L) => /GOES/i.test(L.identifier));
./scripts/wmts_pick.js:65:        console.log('\n=== GOES LAYERS ===');
./scripts/wmts_pick.js:100:      console.log(`GoogleMapsCompatible Level(s): ${match.levels.join(', ') || 'n/a'}`);
./scripts/wmts_pick.js:106:            `Level ${level}: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/${match.identifier}/default/{time}/GoogleMapsCompatible_Level${level}/{z}/{y}/{x}.png`,
./scripts/test-wmts-urls.js:15:    layerId: 'GOES-East_ABI_GeoColor',
./scripts/test-wmts-urls.js:23:    layerId: 'GOES-West_ABI_GeoColor',
./scripts/test-wmts-urls.js:55:    `https://gibs\\.earthdata\\.nasa\\.gov/wmts/epsg3857/best/${tc.layerId}/default/${tc.time.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}/[^/]+/${tc.z}/${tc.y}/${tc.x}\\.${tc.ext}`,
./scripts/test-wmts-urls.js:71:      'http://localhost:3000/api/gibs/health?layer=GOES-East_ABI_GeoColor',
./scripts/validate-catalog.mjs:21:  const isGOES = /GOES|ABI/i.test(id) || /GOES|ABI/i.test(t);
./scripts/validate-catalog.mjs:22:  const expected = isGOES ? 'GoogleMapsCompatible_Level8' : 'GoogleMapsCompatible_Level9';
./scripts/validate-catalog.mjs:23:  if (/GoogleMapsCompatible_Level(8|9)/.test(t) && !t.includes(expected)) {
./scripts/validate-catalog.ts:36:  const isGOES = /GOES|ABI/i.test(id) || /GOES|ABI/i.test(t);
./scripts/validate-catalog.ts:37:  const expected = isGOES ? 'GoogleMapsCompatible_Level8' : 'GoogleMapsCompatible_Level9';
./scripts/validate-catalog.ts:38:  if (/GoogleMapsCompatible_Level(8|9)/.test(t) && !t.includes(expected)) {
./scripts/gibs_layer_info.ts:4://   npx tsx gibs_layer_info.ts "GOES-East_ABI_GeoColor"
./scripts/gibs_layer_info.ts:11:  'https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/1.0.0/WMTSCapabilities.xml';
./scripts/gibs_layer_info.ts:16:    'Provide an ows:Title. Example: npx tsx gibs_layer_info.ts "GOES-East_ABI_GeoColor"',
./scripts/gibs_layer_info.ts:53:    const m = /GoogleMapsCompatible_Level(\d)/.exec(name);
./scripts/gibs_layer_info.ts:145:  console.log('— GIBS WMTS (EPSG:3857) layer —');
./scripts/gibs_layer_info.ts:153:      `Recommended : ${chosenTms}${level !== undefined ? `  (GoogleMapsCompatible Level ${level})` : ''}`,
./docs/CACHING_STRATEGY.md:16:| Satellite (GeoColor) | GOES-East recent frames | High (per 5-10 min) | 2-5m              | 10m                         |
./docs/api.md:3:## NASA GIBS
./docs/api.md:13:  "layer": "GOES-East_ABI_GeoColor",
./docs/api.md:47:- GOES / ABI → `GoogleMapsCompatible_Level8`
./docs/api.md:48:- Others → `GoogleMapsCompatible_Level9`
./docs/observability.md:3:## GIBS Tile Metrics
./docs/observability.md:5:The proxy exposes the following GIBS-specific instruments (Prometheus):
./docs/observability.md:7:- `gibs_tile_upstream_status{code}` – counter of upstream HTTP status codes for GIBS tile fetches (including legacy goes-b13 helper).
./docs/observability.md:18:- Overrides via environment: `GIBS_RATE_BURST`, `GIBS_RATE_REFILL_PER_SEC`
./docs/ROADMAP.md:16:- ✅ Dynamic time dimension for radar/satellite (GIBS GeoColor timestamps discovery + selection & playback in 3D globe; further layers pending).
./.env.example:15:VITE_GIBS_WMTS_TILE_URL=
./ENVIRONMENT_SETUP.md:21:1. **GIBS (NASA)** - `/api/gibs/` - Satellite imagery, timestamps
./ENVIRONMENT_SETUP.md:131:- EARTHDATA_AUTH_KEY (may be needed for enhanced GIBS features)
./AGENTUPDATEHISTORY.md:3:### 2025-08-23: Version 0.2.0 Release – 3D Globe V3 (Playback, FIRMS & OWM Overlays) & GIBS Generalization
./AGENTUPDATEHISTORY.md:9:- Introduces temporal playback for GIBS GeoColor (timestamps endpoint, UI controls, store state, interval-driven animation).
./AGENTUPDATEHISTORY.md:11:- Generalizes GIBS capabilities parsing with extensible utility + tests (`fetchCapabilities`).
./AGENTUPDATEHISTORY.md:16:- Elevate 3D experimental globe toward multi-layer situational awareness while retaining opt-in nature; establish foundation for additional GIBS layers and environmental overlays.
./AGENTUPDATEHISTORY.md:25:- Heuristic XML parsing may be brittle for future GIBS schema changes (follow-up to adopt robust parser).
./AGENTUPDATEHISTORY.md:33:- Multi-layer GIBS selection UI (beyond GeoColor) leveraging generalized capabilities.
./AGENTUPDATEHISTORY.md:87:### 2025-08-23: GIBS Proxy Test Suite
./AGENTUPDATEHISTORY.md:93:Motivation: Increase regression protection for new dynamic earth observation imagery proxy ensuring correctness before adding more GIBS layers/time logic.
./AGENTUPDATEHISTORY.md:97:Follow Ups: Expand tests to cover additional GIBS layer variants & future time enumeration endpoint once implemented.
./AGENTUPDATEHISTORY.md:101:### 2025-08-23: GIBS Dynamic Time Handling (3D Globe)
./AGENTUPDATEHISTORY.md:103:### 2025-08-23: 3D Globe V3 – Time Playback, FIRMS & OWM Layers, Generalized GIBS
./AGENTUPDATEHISTORY.md:107:- Added playback controls (play/pause, step, speed) for GIBS timestamps in Panel; auto-advances selected time.
./AGENTUPDATEHISTORY.md:108:- Generalized GIBS capabilities parsing (`fetchCapabilities`) with layer param and utility tests.
./AGENTUPDATEHISTORY.md:128:Motivation: Enable temporal exploration of GOES-East GeoColor imagery in optional 3D mode while retaining 2D primacy and proxy-first policy.
./AGENTUPDATEHISTORY.md:132:Follow Ups: Generalize timestamp retrieval for additional GIBS layers, add UI playback for time stepping, refactor XML parsing to streaming or schema-driven approach.
./AGENTUPDATEHISTORY.md:138:### 2025-08-23: 3D Globe V2 – Attribution, CartoDB Test, GIBS GeoColor Toggle
./AGENTUPDATEHISTORY.md:144:- Introduced GIBS GeoColor imagery toggle (proxy-backed) in 3D mode with feature gating intact.
./AGENTUPDATEHISTORY.md:151:Follow Ups: Add time parameter wiring for GIBS, add removal tests, performance measure of extra imagery provider.
./AGENTUPDATEHISTORY.md:276:### 2025-08-26: GOES proxy tile migration & prefetch fix
./AGENTUPDATEHISTORY.md:280:- Routed all GOES layers through internal proxy endpoints without time segments and removed misleading `time_format` fields.
./AGENTUPDATEHISTORY.md:281:- Updated tile prefetch helper to default to `.jpg` for GOES layers and only append `?time=` when a timestamp is supplied.
./AGENTUPDATEHISTORY.md:285:- Letting the proxy resolve the latest timestamp prevents stale or invalid GOES requests and simplifies catalog metadata.
./AGENTUPDATEHISTORY.md:293:- `curl -sI http://localhost:4000/api/gibs/tile/GOES-East_ABI_GeoColor/3/2/1.jpg` _(500 ENETUNREACH)_
./AGENTUPDATEHISTORY.md:430:### 2025-08-25: NWS alerts rewrite & GOES timestamp format
./AGENTUPDATEHISTORY.md:434:- Health check reported 400s from api.weather.gov and GOES tiles using date-only timestamps.
./AGENTUPDATEHISTORY.md:439:- Switched GOES catalog entries to full ISO `YYYY-MM-DDTHH:mm:ssZ` timestamps.
./AGENTUPDATEHISTORY.md:443:- Weather.gov requires explicit active path and policy-compliant headers; GIBS GOES endpoints reject date-only requests.
./AGENTUPDATEHISTORY.md:463:### 2025-08-26: GIBS time colon encoding fix
./AGENTUPDATEHISTORY.md:467:- Preserve colons in GOES/GIBS timestamps by switching to `encodeURI` for tile URL construction and health-check replacement.
./AGENTUPDATEHISTORY.md:472:- `encodeURIComponent` was percent-encoding `:` characters, yielding 400 responses from GIBS tile endpoints.
./data/source-inventory.json:34:      "provider": "NASA GIBS",
./data/source-inventory.json:36:      "layer_id": "NASA GIBS WMTS (GOES, MODIS, VIIRS)",
./data/source-inventory.json:40:      "attribution": "NASA GIBS",
./data/source-inventory.json:41:      "notes": "Plug-and-play map tiles | base: https://gibs.earthdata.nasa.gov/wmts/epsg3857/best/wmts.cgi"
./data/source-inventory.json:211:      "notes": "Free/latency ok; coarse vs ground networks | base: (via GIBS or GOES AWS)"
./data/source-inventory.json:264:      "provider": "NOAA/NASA GIBS",
./data/source-inventory.json:266:      "layer_id": "GOES ABI (True Color / Vis/IR/RGB)",
./data/source-inventory.json:270:      "attribution": "NOAA/NASA GIBS",
./data/source-inventory.json:271:      "notes": "Fast consumption via WMTS; or process S3 | base: https://gibs.earthdata.nasa.gov/wmts"
./data/source-inventory.json:276:      "layer_id": "GOES GLM L2 (events/groups/flashes)",
./README.md:35:- Proxy upstream allow‑list currently: `gibs.earthdata.nasa.gov, opengeo.ncep.noaa.gov, nomads.ncep.noaa.gov` plus any additional hosts required by credentialled vendor routes (FIRMS, OWM, NWS) handled internally.
./README.md:132:- Layer catalog (`web/public/catalog.json`) with raster (Rainviewer radar, GIBS MODIS True Color, GOES IR, OpenWeatherMap tiles via proxy) + vector (alerts, earthquakes, FIRMS fires via CSV → GeoJSON) entries.
./README.md:145:- Radar & satellite time dimension: dynamic timestamp discovery (Rainviewer available frames, GIBS available times) not yet integrated (currently uses "now").
./CHANGELOG.md:12:- Generic GIBS timestamps endpoint and “latest tile” route with small in-memory caches
./CHANGELOG.md:15:- Explicit `?time=` support on generic GIBS tile route with validation
./CHANGELOG.md:16:- GIBS ops polish: rate limiting and tile metrics (status counter & duration histogram)
./CHANGELOG.md:20:- Correct Cache-Control on GIBS responses (60s), consistent with near-real-time cadence
